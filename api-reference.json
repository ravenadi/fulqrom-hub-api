{
  "apiInfo": {
    "title": "Fulqrom Hub REST API",
    "description": "Australian Commercial Real Estate & HVAC Building Management System API",
    "version": "1.9.0",
    "baseUrl": "http://localhost:30001",
    "database": "MongoDB Atlas - hub_fulqrom database",
    "lastUpdated": "2025-10-08T14:00:00.000Z",
    "changeLog": {
      "v1.9.0": {
        "date": "2025-10-08",
        "changes": [
          "Added document_count field to GET /api/assets response - Shows number of documents associated with each asset",
          "Enhanced assets list API with document counting aggregation for accordion visibility control",
          "Fixed storage stats endpoint to count document records separately from files",
          "Added GET /api/documents/stats endpoint for simple document count",
          "Updated storage stats to show totalRecords, documentsWithFiles, and documentsWithoutFiles",
          "Fixed PUT /api/documents/:id to return entity names in location object (matching GET response format)",
          "Document update response now includes site_name, building_name, floor_name, asset_name, asset_type, tenant_name, vendor_name",
          "Added comprehensive asset floor_id migration script supporting all floor naming variations",
          "Migration supports: Floor 05->5, Lvl 05->Level 5, Basement 2, B2, GF, Plaza, Terrace, Roof, Mezzanine, etc.",
          "Added floor_number sorting support to document list API (location.floor.floor_number)"
        ]
      },
      "v1.8.0": {
        "date": "2025-10-08",
        "changes": [
          "Added GET /api/documents/tags endpoint - Returns all unique tags from documents for dropdown filtering",
          "Enhanced document tag filtering with both 'tag' and 'tags' query parameters (case-insensitive, comma-separated support)",
          "Added sorting support for hierarchical fields in document list API",
          "New sortable fields: location.site.site_name, location.floor.floor_name, location.asset.asset_name",
          "All floor APIs now sort by floor_number in ascending order by default",
          "Standardized document categories to human-readable format (e.g., 'Fire Safety Reports' instead of 'fire_safety_reports')",
          "Added 'Drawing Register' to document categories dropdown",
          "Migration script for standardizing existing document categories in database"
        ]
      },
      "v1.7.0": {
        "date": "2025-10-06",
        "changes": [
          "Added Document Versioning System with 3 new endpoints",
          "POST /api/documents/:id/versions - Upload new document version with file",
          "GET /api/documents/versions/:documentGroupId - Get all versions of a document",
          "POST /api/documents/versions/:versionId/restore - Restore previous version as new current version",
          "Minimal version documents storing only file data and metadata (WHO, WHEN, WHERE)",
          "Automatic version numbering (1.0, 1.1, 2.0) with version_sequence tracking",
          "Document grouping via document_group_id for version management",
          "S3 date-based file organization: bucket/year/month/day/timestamp-uuid-filename",
          "Version metadata tracks uploaded_by, upload_timestamp, change_notes, superseded_version",
          "Added Email Notification Infrastructure (EmailNotification model, EmailService utility)",
          "Multi-provider email support (SMTP via Zoho, SendGrid, AWS SES, console logging)",
          "HTML email templates with Australian formatting (documentAssignment, documentUpdate)",
          "Australian date/time formatting utility (DD/MM/YYYY, Australia/Sydney timezone)",
          "Email audit trail with sent/failed/pending status tracking and retry capability"
        ]
      },
      "v1.6.0": {
        "date": "2025-10-06",
        "changes": [
          "Added User Management API with 9 endpoints for CRUD operations, deactivation, and resource access",
          "Added Role Management API with 6 endpoints for role CRUD and user assignment",
          "Added AuditLog model for comprehensive action tracking with IP and user agent",
          "Auto-creation of Site Manager role with full permissions on server startup",
          "Auto-creation of demo user (demo@fulqrom.com.au) assigned to Site Manager role",
          "User API accepts both full_name and first_name/last_name formats for flexibility",
          "Resource-level access control for users (site, building, floor, asset, tenant, vendor)",
          "Role-based permissions system with module-level CRUD flags (view, create, edit, delete)",
          "Database initialization script runs on server startup to ensure default data",
          "Protected deletion for Site Manager role and demo user"
        ]
      },
      "v1.5.0": {
        "date": "2025-10-05",
        "changes": [
          "Enhanced Document Search functionality to cover 40+ searchable fields",
          "Search now includes: basic fields, hierarchical data (customer/site/building/floor/tenant/vendor/asset names)",
          "Search includes: file metadata, compliance data, drawing info, approval workflow fields",
          "Search includes: version metadata (user names, emails, change notes)",
          "Expanded sortable fields to 20+ including version, approval status, dates, file size",
          "Comprehensive case-insensitive regex search across all relevant document fields",
          "Search can now find documents by any keyword in the table for better discoverability"
        ]
      },
      "v1.4.0": {
        "date": "2025-10-05",
        "changes": [
          "Added Document Approval Workflow API with 6 new endpoints",
          "POST /api/documents/:id/request-approval - Request approval for a document",
          "PUT /api/documents/:id/approve - Approve a document",
          "PUT /api/documents/:id/reject - Reject a document with required comments",
          "PUT /api/documents/:id/revoke-approval - Revoke/cancel approval request",
          "GET /api/documents/pending-approval - Get all documents pending approval with pagination",
          "GET /api/documents/:id/approval-history - Get complete approval history for a document",
          "Added ApprovalHistory model to track all approval workflow actions",
          "Added approval validation middleware for all approval endpoints",
          "Approval workflow includes action tracking, user attribution, and audit trail"
        ]
      },
      "v1.3.0": {
        "date": "2025-10-05",
        "changes": [
          "Added vendor support to Document model location schema",
          "Added PUT /api/documents/bulk-update endpoint for bulk document updates",
          "Added vendor_id filtering support to GET /api/documents",
          "Added vendor_id support to POST /api/documents",
          "Enhanced fetchEntityNames helper to resolve vendor names from Vendor model"
        ]
      },
      "v1.2.0": {
        "date": "2025-10-05",
        "changes": [
          "Enhanced Asset module with lifecycle management fields",
          "Added warranty_expiry, service_contractor, last_service_date, next_service_due fields",
          "Added technical specifications: energy_rating, capacity_specifications, qr_code, notes",
          "Added validation middleware for asset creation and updates",
          "Added floor_id reference support for assets",
          "Maintains existing field names: make, model, serial, condition, purchase_cost_aud, current_book_value_aud"
        ]
      },
      "v1.1.0": {
        "date": "2025-10-05",
        "changes": [
          "Removed all hardcoded enum validations from models and middleware",
          "Migrated dropdown values to database (Settings collection)",
          "Added vendor module dropdown values (contractor_types, consultant_specialisations, etc.)",
          "Added customer_organisation_sizes and contact_method_types dropdowns",
          "POST /api/dropdowns now persists changes to database instead of in-memory only",
          "All dropdown endpoints now return source field (database|fallback_constants)",
          "Updated all models to accept any string values (validation done on frontend)"
        ]
      }
    }
  },
  "endpoints": {
    "health": {
      "method": "GET",
      "path": "/health",
      "description": "API health check",
      "response": {
        "status": "OK",
        "timestamp": "2025-09-24T07:07:07.052Z",
        "service": "Fulqrom Hub API",
        "version": "1.0.0"
      }
    },
    "root": {
      "method": "GET",
      "path": "/",
      "description": "API information and endpoint list",
      "response": {
        "message": "Fulqrom Hub REST API",
        "description": "Australian Commercial Real Estate & HVAC Building Management System",
        "version": "1.0.0",
        "endpoints": {
          "health": "/health",
          "customers": "/api/customers",
          "customer_stats": "/api/customers/:id/stats",
          "contacts": "/api/customers/:customerId/contacts",
          "sites": "/api/sites",
          "buildings": "/api/buildings",
          "floors": "/api/floors",
          "tenants": "/api/tenants",
          "assets": "/api/assets",
          "building_tenants": "/api/building-tenants",
          "documents": "/api/documents",
          "hierarchy": "/api/hierarchy"
        }
      }
    },
    "customers": {
      "list": {
        "method": "GET",
        "path": "/api/customers",
        "description": "Get all customers",
        "status": "IMPLEMENTED",
        "response": {
          "success": true,
          "count": "number",
          "data": "Array of customer objects"
        }
      },
      "getById": {
        "method": "GET",
        "path": "/api/customers/:id",
        "description": "Get single customer by ObjectID",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID (24-character hex string)"
        },
        "response": {
          "success": true,
          "data": "Single customer object"
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/customers",
        "description": "Create new customer",
        "status": "IMPLEMENTED",
        "requestBody": {
          "organisation": {
            "organisation_name": "string (optional)",
            "email_domain": "string (optional)",
            "logo_url": "string (optional)",
            "building_image": "string (optional)",
            "notes": "string (optional)",
            "metadata": "object (optional)"
          },
          "company_profile": {
            "business_number": "string (optional, ABN format)",
            "company_number": "string (optional, ACN format)",
            "trading_name": "string (optional)",
            "industry_type": "string (optional)",
            "organisation_size": "string (optional)"
          },
          "business_address": {
            "street": "string (optional)",
            "suburb": "string (optional)",
            "state": "string (optional)",
            "postcode": "string (optional)"
          },
          "postal_address": {
            "street": "string (optional)",
            "suburb": "string (optional)",
            "state": "string (optional)",
            "postcode": "string (optional)"
          },
          "contact_methods": "array (optional)",
          "metadata": "array (optional)",
          "is_active": "boolean (optional, default: true)"
        },
        "response": {
          "success": true,
          "message": "Customer created successfully",
          "data": "Created customer object with _id, timestamps"
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/customers/:id",
        "description": "Update existing customer",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID (24-character hex string)"
        },
        "requestBody": "Partial customer object",
        "response": {
          "success": true,
          "message": "Customer updated successfully",
          "data": "Updated customer object"
        }
      },
      "delete": {
        "method": "DELETE",
        "path": "/api/customers/:id",
        "description": "Delete customer",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID (24-character hex string)"
        },
        "response": {
          "success": true,
          "message": "Customer deleted successfully",
          "data": "Deleted customer object"
        }
      },
      "getStats": {
        "method": "GET",
        "path": "/api/customers/:id/stats",
        "description": "Get customer statistics (sites, buildings, assets, documents counts)",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID (24-character hex string)"
        },
        "response": {
          "success": true,
          "data": {
            "customer_id": "ObjectId",
            "customer_name": "string",
            "stats": {
              "totalSites": "number",
              "totalBuildings": "number",
              "totalAssets": "number",
              "totalDocuments": "number"
            }
          }
        }
      }
    },
    "contacts": {
      "list": {
        "method": "GET",
        "path": "/api/customers/:customerId/contacts",
        "description": "Get all contacts for a customer from contact_methods array with search support",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID (24-character hex string)"
        },
        "queryParams": {
          "search": "Search term for full_name, method_value, job_title, department, role_type"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": "Array of contact objects from customer.contact_methods",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "getPrimary": {
        "method": "GET",
        "path": "/api/customers/:customerId/contacts/primary",
        "description": "Get primary contact for customer",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": "Primary contact object",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "search": {
        "method": "GET",
        "path": "/api/customers/:customerId/contacts/search",
        "description": "Search contacts by name, email, job title, or department",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID"
        },
        "queryParams": {
          "q": "Search term for name, email, job title, department",
          "role_type": "Filter by role type",
          "contact_type": "Filter by contact type"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": "Array of filtered contact objects",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "getById": {
        "method": "GET",
        "path": "/api/customers/:customerId/contacts/:id",
        "description": "Get single contact by ID from customer's contact_methods",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID",
          "id": "Contact ObjectID from contact_methods array"
        },
        "response": {
          "success": true,
          "data": "Single contact object",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/customers/:customerId/contacts",
        "description": "Add new contact to customer's contact_methods array",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID"
        },
        "requestBody": {
          "full_name": "string (optional)",
          "job_title": "string (optional)",
          "department": "string (optional)",
          "role_type": "string (optional)",
          "contact_type": "string (optional)",
          "platform_access": "string (optional)",
          "method_type": "string (optional)",
          "method_value": "string (optional)",
          "label": "string (optional)",
          "is_primary": "boolean (optional, default: false)"
        },
        "response": {
          "success": true,
          "message": "Contact created successfully",
          "data": "Created contact object with auto-generated _id",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/customers/:customerId/contacts/:id",
        "description": "Update contact in customer's contact_methods array",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID",
          "id": "Contact ObjectID from contact_methods array"
        },
        "requestBody": "Partial contact object",
        "response": {
          "success": true,
          "message": "Contact updated successfully",
          "data": "Updated contact object",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "setPrimary": {
        "method": "PATCH",
        "path": "/api/customers/:customerId/contacts/:id/primary",
        "description": "Set contact as primary (removes primary from others)",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID",
          "id": "Contact ObjectID"
        },
        "response": {
          "success": true,
          "message": "Contact set as primary successfully",
          "data": "Updated contact object",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "delete": {
        "method": "DELETE",
        "path": "/api/customers/:customerId/contacts/:id",
        "description": "Remove contact from customer's contact_methods array",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID",
          "id": "Contact ObjectID"
        },
        "response": {
          "success": true,
          "message": "Contact deleted successfully",
          "data": "Deleted contact object",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "addMethod": {
        "method": "POST",
        "path": "/api/customers/:customerId/contacts/:id/methods",
        "description": "Add contact method to existing contact (supports multiple methods per contact)",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID",
          "id": "Contact ObjectID"
        },
        "requestBody": {
          "method_type": "string (required) - Email, Phone, SMS, WhatsApp",
          "method_value": "string (required) - email@example.com, +61400123456",
          "label": "string (optional) - Work, Mobile, Home",
          "is_primary": "boolean (optional, default: false)"
        },
        "response": {
          "success": true,
          "message": "Contact method added successfully",
          "data": "New method object with _id",
          "contact": "Updated contact object",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "updateMethod": {
        "method": "PUT",
        "path": "/api/customers/:customerId/contacts/:id/methods/:methodId",
        "description": "Update specific contact method",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID",
          "id": "Contact ObjectID",
          "methodId": "Method ObjectID"
        },
        "requestBody": "Partial method object",
        "response": {
          "success": true,
          "message": "Contact method updated successfully",
          "data": "Updated method object",
          "contact": "Updated contact object",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      },
      "deleteMethod": {
        "method": "DELETE",
        "path": "/api/customers/:customerId/contacts/:id/methods/:methodId",
        "description": "Delete specific contact method",
        "status": "IMPLEMENTED",
        "params": {
          "customerId": "MongoDB ObjectID",
          "id": "Contact ObjectID",
          "methodId": "Method ObjectID"
        },
        "response": {
          "success": true,
          "message": "Contact method deleted successfully",
          "data": "Deleted method object",
          "contact": "Updated contact object",
          "customer": {
            "id": "ObjectId",
            "name": "string"
          }
        }
      }
    },
    "sites": {
      "list": {
        "method": "GET",
        "path": "/api/sites",
        "description": "Get all sites with filtering",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "status": "Filter by site status",
          "manager": "Filter by manager name (case insensitive)",
          "address": "Filter by address (case insensitive)",
          "is_active": "boolean - Filter by active status",
          "search": "Search term for site_name, address, manager.name"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": "Array of site objects with populated customer info"
        }
      },
      "getById": {
        "method": "GET",
        "path": "/api/sites/:id",
        "description": "Get single site by ID",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": "Single site object with populated customer info"
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/sites",
        "description": "Create new site",
        "status": "IMPLEMENTED",
        "requestBody": {
          "site_name": "string",
          "address": "string or object (structured address with street, suburb, state, postcode, coordinates)",
          "status": "string (Active, Under Construction, Planning, Inactive)",
          "customer_id": "ObjectId (reference to Customer)",
          "land_area": "number (required, square metres, min: 0)",
          "land_area_unit": "string (default: 'm²')",
          "local_council": "string (optional)",
          "security_level": "string (enum: 'Public Access', 'Controlled', 'High Security')",
          "shared_facilities": "array of strings (optional, options: 'Car parks', 'Loading docks')",
          "note": "string (optional)",
          "manager": {
            "name": "string",
            "email": "string",
            "phone": "string",
            "title": "string"
          },
          "metadata": "array (optional)",
          "is_active": "boolean (default: true)"
        },
        "response": {
          "success": true,
          "message": "Site created successfully",
          "data": "Created site object"
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/sites/:id",
        "description": "Update site",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": "Partial site object with new fields support",
        "response": {
          "success": true,
          "message": "Site updated successfully",
          "data": "Updated site object"
        }
      }
    },
    "buildings": {
      "list": {
        "method": "GET",
        "path": "/api/buildings",
        "description": "Get all buildings with filtering and summary statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "category": "Filter by building category",
          "building_type": "Filter by building type",
          "building_grade": "Filter by building grade",
          "status": "Filter by building status",
          "is_active": "boolean - Filter by active status",
          "search": "Search term for building_name, building_code"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_buildings": "number",
            "active_buildings": "number",
            "under_construction": "number",
            "total_floors": "number",
            "total_assets": "number",
            "avg_occupancy": "number"
          },
          "data": "Array of building objects with populated references"
        }
      },
      "getById": {
        "method": "GET",
        "path": "/api/buildings/:id",
        "description": "Get single building by ID",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": "Single building object with populated references"
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/buildings",
        "description": "Create new building",
        "status": "IMPLEMENTED",
        "requestBody": {
          "building_name": "string (required)",
          "building_code": "string",
          "site_id": "ObjectId (reference to Site, required)",
          "customer_id": "ObjectId (reference to Customer)",
          "manager": "object { name, email, phone, title }",
          "building_type": "string (required)",
          "building_grade": "string (Grade A, Grade B, Grade C, Premium)",
          "primary_use": "string (required, enum: 'Office', 'Retail', 'Industrial', 'Warehouse', 'Mixed Use', 'Healthcare', 'Educational', 'Government', 'Hospitality', 'Other')",
          "last_inspection_date": "Date (optional, for compliance tracking)",
          "accessibility_features": "array of strings (optional, enum: 'lifts', 'ramps', 'disabled_parking', 'accessible_toilets', 'hearing_loops', 'braille_signage', 'automatic_doors', 'wheelchair_access')",
          "parking_spaces": "number (optional, min: 0, default: 0)",
          "number_of_floors": "number (required, min: 1)",
          "total_area": "number (optional, min: 0)",
          "year_built": "number (optional)",
          "nabers_rating": "number (optional, 0-6 stars)",
          "status": "string (default: 'Active')",
          "metadata": "array (optional)",
          "is_active": "boolean (default: true)"
        },
        "response": {
          "success": true,
          "message": "Building created successfully",
          "data": "Created building object with populated references"
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/buildings/:id",
        "description": "Update building",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": "Partial building object with new fields support",
        "response": {
          "success": true,
          "message": "Building updated successfully",
          "data": "Updated building object"
        }
      },
      "stats": {
        "method": "GET",
        "path": "/api/buildings/summary/stats",
        "description": "Get building summary statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID"
        },
        "response": {
          "success": true,
          "data": {
            "totalBuildings": "number",
            "activeBuildings": "number",
            "underConstruction": "number",
            "totalFloors": "number",
            "totalAssets": "number",
            "avgOccupancy": "number",
            "avgEnergyRating": "number"
          }
        }
      },
      "byCategory": {
        "method": "GET",
        "path": "/api/buildings/by-category",
        "description": "Group buildings by category",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID"
        },
        "response": {
          "success": true,
          "data": "Array of category statistics with count, activeCount, avgOccupancy, totalAssets"
        }
      }
    },
    "floors": {
      "list": {
        "method": "GET",
        "path": "/api/floors",
        "description": "Get all floors with filtering and summary statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID",
          "floor_type": "Filter by floor type",
          "occupancy_type": "Filter by occupancy type",
          "access_control": "Filter by access control",
          "status": "Filter by floor status",
          "is_active": "boolean - Filter by active status",
          "search": "Search term for floor_name"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_floors": "number",
            "active_floors": "number",
            "under_construction": "number",
            "total_assets": "number",
            "total_area": "number",
            "avg_occupancy": "number"
          },
          "data": "Array of floor objects with populated references"
        }
      },
      "getById": {
        "method": "GET",
        "path": "/api/floors/:id",
        "description": "Get single floor by ID",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": "Single floor object with populated references"
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/floors",
        "description": "Create new floor",
        "status": "IMPLEMENTED",
        "requestBody": {
          "site_id": "ObjectId (reference to Site, required)",
          "building_id": "ObjectId (reference to Building, required)",
          "customer_id": "ObjectId (reference to Customer)",
          "floor_name": "string (required)",
          "floor_number": "number",
          "floor_type": "string (required, enum: 'Office', 'Retail', 'Plant Room', 'Lab', 'Common Area', 'Residential')",
          "maximum_occupancy": "number (optional, min: 0, default: 0) - replaces 'occupancy'",
          "occupancy": "number (deprecated, use 'maximum_occupancy') - maintained for backward compatibility",
          "occupancy_type": "string (optional, enum: 'Single Tenant', 'Multi Tenant', 'Common Area')",
          "access_control": "string (optional, enum: 'Public', 'Keycard Required', 'Restricted')",
          "fire_compartment": "string (optional, emergency planning/safety designation)",
          "hvac_zones": "number (optional, min: 0, climate control zones)",
          "special_features": "array of strings (optional, enum: 'Equipment Room', 'Common Area', 'Server Room', 'Meeting Room', 'Kitchen', 'Storage')",
          "area_number": "number",
          "area_unit": "string (m²|sq ft, default: m²)",
          "floor_area": "number",
          "floor_area_unit": "string (m²|sq ft, default: m²)",
          "ceiling_height": "number (optional, in metres)",
          "ceiling_height_unit": "string (m|ft, default: m)",
          "status": "string (default: Active)",
          "assets_count": "number (default: 0)",
          "metadata": "array (optional)",
          "is_active": "boolean (default: true)"
        },
        "response": {
          "success": true,
          "message": "Floor created successfully",
          "data": "Created floor object with populated references (includes both maximum_occupancy and occupancy virtual field)"
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/floors/:id",
        "description": "Update floor with backward compatibility for occupancy field",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": "Partial floor object (supports both 'occupancy' and 'maximum_occupancy', 'occupancy' auto-mapped to 'maximum_occupancy')",
        "response": {
          "success": true,
          "message": "Floor updated successfully",
          "data": "Updated floor object (includes both maximum_occupancy and occupancy virtual field)"
        }
      },
      "byBuilding": {
        "method": "GET",
        "path": "/api/floors/by-building/:buildingId",
        "description": "Get floors by building",
        "status": "IMPLEMENTED",
        "params": {
          "buildingId": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_floors": "number",
            "active_floors": "number",
            "total_area": "number",
            "total_assets": "number",
            "avg_occupancy": "number"
          },
          "data": "Array of floor objects for the building"
        }
      },
      "stats": {
        "method": "GET",
        "path": "/api/floors/summary/stats",
        "description": "Get floor statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": {
            "totalFloors": "number",
            "activeFloors": "number",
            "underConstruction": "number",
            "totalArea": "number",
            "totalAssets": "number",
            "avgOccupancy": "number",
            "avgCeilingHeight": "number"
          }
        }
      },
      "byType": {
        "method": "GET",
        "path": "/api/floors/by-type",
        "description": "Group floors by type",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": "Array of floor type statistics"
        }
      }
    },
    "assets": {
      "list": {
        "method": "GET",
        "path": "/api/assets",
        "description": "Get all assets with filtering, summary statistics, and document counts",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID",
          "floor_id": "Filter by floor ID",
          "category": "Filter by asset category",
          "status": "Filter by asset status",
          "condition": "Filter by asset condition (Excellent, Good, Average, Poor, Critical)",
          "make": "Filter by manufacturer/make (case insensitive)",
          "model": "Filter by model (case insensitive)",
          "level": "Filter by floor level (e.g., 'Lvl 20', 'GF')",
          "area": "Filter by area/room (case insensitive)",
          "device_id": "Filter by device ID",
          "asset_no": "Filter by asset number (case insensitive)",
          "asset_id": "Filter by asset ID",
          "refrigerant": "Filter by refrigerant type (case insensitive)",
          "owner": "Filter by owner (case insensitive)",
          "service_status": "Filter by service status",
          "service_contractor": "Filter by service contractor (case insensitive)",
          "energy_rating": "Filter by energy rating (case insensitive)",
          "age_min": "Filter by minimum age",
          "age_max": "Filter by maximum age",
          "purchase_cost_min": "Filter by minimum purchase cost",
          "purchase_cost_max": "Filter by maximum purchase cost",
          "current_value_min": "Filter by minimum current book value",
          "current_value_max": "Filter by maximum current book value",
          "test_result": "Filter by last test result",
          "search": "Text search across asset_no, asset_id, device_id, make, model, serial, area, category, type, service_contractor, qr_code, notes",
          "is_active": "boolean - Filter by active status",
          "page": "Page number (default: 1)",
          "limit": "Items per page (default: 50, max: 200)",
          "sort_by": "Sort field (createdAt, updatedAt, asset_no, category, status, condition, make, model, warranty_expiry, next_service_due, etc.)",
          "sort_order": "Sort direction (asc or desc, default: desc)"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_assets": "number",
            "active_assets": "number",
            "operational_assets": "number",
            "good_condition": "number",
            "poor_condition": "number",
            "needs_maintenance": "number"
          },
          "data": "Array of asset objects with populated references and document_count field"
        },
        "notes": [
          "Each asset in data array includes document_count field (number of associated documents)",
          "document_count can be used to show/hide accordion icons in UI (show if count > 0)",
          "Document count is calculated via MongoDB aggregation matching location.asset.asset_id",
          "Efficient single-query aggregation for all assets in the current page"
        ]
      },
      "getById": {
        "method": "GET",
        "path": "/api/assets/:id",
        "description": "Get single asset by ID",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": "Single asset object with populated references"
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/assets",
        "description": "Create new asset",
        "status": "IMPLEMENTED",
        "requestBody": {
          "customer_id": "ObjectId (REQUIRED - reference to Customer)",
          "site_id": "ObjectId (optional - reference to Site)",
          "building_id": "ObjectId (optional - reference to Building)",
          "floor_id": "ObjectId (optional - reference to Floor)",
          "asset_id": "string (optional)",
          "asset_no": "string (optional)",
          "device_id": "string (optional)",
          "category": "string (optional - e.g., Boiler System, Chiller System)",
          "type": "string (optional - e.g., Boiler - Gas Fired)",
          "status": "string (optional - Active, Operational, Maintenance Required)",
          "condition": "string (optional - Excellent, Good, Average, Poor, Critical)",
          "make": "string (optional - manufacturer/brand name)",
          "model": "string (optional - model number/name)",
          "serial": "string (optional - serial number)",
          "refrigerant": "string (optional - e.g., R410A, R32, R134a)",
          "refrigerant_capacity": "string (optional)",
          "refrigerant_consumption": "string (optional)",
          "level": "string (optional - e.g., Lvl 20, GF)",
          "area": "string (optional - e.g., Level 20 plant room)",
          "owner": "string (optional - e.g., Landlord, Tenant)",
          "da19_life_expectancy": "string (optional - e.g., 20-25 Yrs)",
          "service_status": "string (optional - e.g., Contracted)",
          "service_contractor": "string (optional - max 255 chars)",
          "date_of_installation": "Date (optional - ISO 8601 format)",
          "age": "number (optional - integer >= 0)",
          "last_test_date": "Date (optional - ISO 8601 format)",
          "last_test_result": "string (optional - Pass, Fail)",
          "last_service_date": "Date (optional - ISO 8601 format)",
          "next_service_due": "Date (optional - ISO 8601 format)",
          "warranty_expiry": "Date (optional - ISO 8601 format)",
          "purchase_cost_aud": "number (optional - >= 0, max 2 decimal places)",
          "current_book_value_aud": "number (optional - >= 0, max 2 decimal places)",
          "weight_kgs": "number (optional - >= 0)",
          "energy_rating": "string (optional - max 50 chars, e.g., '5 Star', 'A+')",
          "capacity_specifications": "string (optional - technical specifications)",
          "qr_code": "string (optional - max 255 chars)",
          "notes": "string (optional - additional information)",
          "is_active": "boolean (optional - default: true)"
        },
        "response": {
          "success": true,
          "message": "Asset created successfully",
          "data": "Created asset object"
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/assets/:id",
        "description": "Update asset (all fields optional)",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": "Partial asset object - same fields as create, all optional",
        "response": {
          "success": true,
          "message": "Asset updated successfully",
          "data": "Updated asset object"
        }
      },
      "stats": {
        "method": "GET",
        "path": "/api/assets/summary/stats",
        "description": "Get asset statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": {
            "totalAssets": "number",
            "activeAssets": "number",
            "operationalAssets": "number",
            "maintenanceRequired": "number",
            "goodCondition": "number",
            "fairCondition": "number",
            "poorCondition": "number",
            "totalValue": "number",
            "totalPurchaseCost": "number",
            "avgAge": "number",
            "testsPassed": "number",
            "testsFailed": "number"
          }
        }
      },
      "byBuilding": {
        "method": "GET",
        "path": "/api/assets/by-building/:buildingId",
        "description": "Get assets by building",
        "status": "IMPLEMENTED",
        "params": {
          "buildingId": "MongoDB ObjectID"
        },
        "queryParams": {
          "category": "Filter by category",
          "status": "Filter by status",
          "condition": "Filter by condition",
          "level": "Filter by floor level",
          "area": "Filter by area",
          "make": "Filter by make",
          "page": "Page number",
          "limit": "Items per page"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_assets": "number",
            "active_assets": "number",
            "operational_assets": "number",
            "maintenance_required": "number",
            "good_condition": "number",
            "total_value": "number",
            "avg_age": "number"
          },
          "data": "Array of asset objects for the building",
          "pagination": "object"
        }
      },
      "byCategory": {
        "method": "GET",
        "path": "/api/assets/by-category",
        "description": "Group assets by category",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": "Array of category statistics with count, condition breakdown, and value totals"
        }
      }
    },
    "building_tenants": {
      "list": {
        "method": "GET",
        "path": "/api/building-tenants",
        "description": "Get all building tenants with filtering and summary statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID",
          "floor_id": "Filter by floor ID",
          "tenant_status": "Filter by tenant status",
          "lease_type": "Filter by lease type",
          "industry_type": "Filter by industry type",
          "lease_expiring_soon": "boolean - Filter leases expiring in 30 days",
          "is_active": "boolean - Filter by active status",
          "search": "Search term for tenant_legal_name, tenant_trading_name, abn, primary_contact_name, primary_contact_email, industry_type"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_tenants": "number",
            "active_tenants": "number",
            "leases_expiring_soon": "number",
            "total_occupied_area": "number",
            "total_employees": "number",
            "total_parking_spaces": "number"
          },
          "data": "Array of tenant objects with populated references"
        }
      },
      "getById": {
        "method": "GET",
        "path": "/api/building-tenants/:id",
        "description": "Get single tenant by ID",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": "Single tenant object with populated references"
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/building-tenants",
        "description": "Create new tenant",
        "status": "IMPLEMENTED",
        "requestBody": {
          "customer_id": "ObjectId (reference to Customer)",
          "site_id": "ObjectId (reference to Site)",
          "building_id": "ObjectId (reference to Building)",
          "floor_id": "ObjectId (reference to Floor)",
          "tenant_legal_name": "string",
          "tenant_trading_name": "string",
          "abn": "string (11 digits)",
          "acn": "string (9 digits)",
          "lease_type": "string",
          "lease_start_date": "Date",
          "lease_end_date": "Date",
          "occupied_area": "number",
          "number_of_employees": "number",
          "allocated_parking_spaces": "number",
          "operating_hours_start": "string (HH:MM)",
          "operating_hours_end": "string (HH:MM)",
          "operating_days": "string",
          "primary_contact_name": "string",
          "primary_contact_title": "string",
          "primary_contact_phone": "string",
          "primary_contact_email": "string",
          "industry_type": "string",
          "business_category": "string",
          "rental_rate": "number",
          "tenant_status": "string (Active, Inactive, etc.)",
          "emergency_contacts": "array (optional)",
          "utilities_included": "array (optional)",
          "services_included": "array (optional)",
          "special_requirements": "string (optional)",
          "is_active": "boolean (default: true)"
        },
        "response": {
          "success": true,
          "message": "Tenant created successfully",
          "data": "Created tenant object with populated references"
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/building-tenants/:id",
        "description": "Update tenant",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": "Partial tenant object",
        "response": {
          "success": true,
          "message": "Tenant updated successfully",
          "data": "Updated tenant object"
        }
      },
      "byBuilding": {
        "method": "GET",
        "path": "/api/building-tenants/by-building/:buildingId",
        "description": "Get tenants by building",
        "status": "IMPLEMENTED",
        "params": {
          "buildingId": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_tenants": "number",
            "active_tenants": "number",
            "total_occupied_area": "number",
            "total_employees": "number",
            "total_parking_spaces": "number"
          },
          "data": "Array of tenant objects for the building"
        }
      },
      "stats": {
        "method": "GET",
        "path": "/api/building-tenants/summary/stats",
        "description": "Get tenant statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": {
            "totalTenants": "number",
            "activeTenants": "number",
            "leasesExpiringSoon": "number",
            "totalOccupiedArea": "number",
            "totalEmployees": "number",
            "totalParkingSpaces": "number",
            "avgRentalRate": "number"
          }
        }
      },
      "byIndustry": {
        "method": "GET",
        "path": "/api/building-tenants/by-industry",
        "description": "Group tenants by industry type",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": "Array of industry statistics"
        }
      }
    },
    "tenants": {
      "list": {
        "method": "GET",
        "path": "/api/tenants",
        "description": "Get all tenants with filtering and summary statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID",
          "floor_id": "Filter by floor ID",
          "tenant_status": "Filter by tenant status",
          "lease_type": "Filter by lease type",
          "industry_type": "Filter by industry type",
          "lease_expiring_soon": "boolean - Filter leases expiring in 30 days",
          "is_active": "boolean - Filter by active status",
          "search": "Search term for tenant_legal_name, tenant_trading_name, abn, primary_contact_name, primary_contact_email, industry_type"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_tenants": "number",
            "active_tenants": "number",
            "leases_expiring_soon": "number",
            "total_occupied_area": "number",
            "total_employees": "number",
            "total_parking_spaces": "number"
          },
          "data": "Array of tenant objects with populated references"
        }
      },
      "getById": {
        "method": "GET",
        "path": "/api/tenants/:id",
        "description": "Get single tenant by ID",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": "Single tenant object with populated references"
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/tenants",
        "description": "Create new tenant",
        "status": "IMPLEMENTED",
        "requestBody": {
          "customer_id": "ObjectId (reference to Customer)",
          "site_id": "ObjectId (reference to Site)",
          "building_id": "ObjectId (reference to Building)",
          "floor_id": "ObjectId (reference to Floor)",
          "tenant_legal_name": "string",
          "tenant_trading_name": "string",
          "abn": "string (11 digits)",
          "primary_contact_name": "string",
          "primary_contact_email": "string",
          "industry_type": "string",
          "tenant_status": "string (Active, Inactive, etc.)",
          "is_active": "boolean (default: true)"
        },
        "response": {
          "success": true,
          "message": "Tenant created successfully",
          "data": "Created tenant object with populated references"
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/tenants/:id",
        "description": "Update tenant",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": "Partial tenant object",
        "response": {
          "success": true,
          "message": "Tenant updated successfully",
          "data": "Updated tenant object"
        }
      },
      "delete": {
        "method": "DELETE",
        "path": "/api/tenants/:id",
        "description": "Delete tenant",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "message": "Tenant deleted successfully",
          "data": "Deleted tenant object"
        }
      },
      "byBuilding": {
        "method": "GET",
        "path": "/api/tenants/by-building/:buildingId",
        "description": "Get tenants by building",
        "status": "IMPLEMENTED",
        "params": {
          "buildingId": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_tenants": "number",
            "active_tenants": "number",
            "total_occupied_area": "number",
            "total_employees": "number",
            "total_parking_spaces": "number"
          },
          "data": "Array of tenant objects for the building"
        }
      },
      "stats": {
        "method": "GET",
        "path": "/api/tenants/summary/stats",
        "description": "Get tenant statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": {
            "totalTenants": "number",
            "activeTenants": "number",
            "leasesExpiringSoon": "number",
            "totalOccupiedArea": "number",
            "totalEmployees": "number",
            "totalParkingSpaces": "number",
            "avgRentalRate": "number"
          }
        }
      },
      "byIndustry": {
        "method": "GET",
        "path": "/api/tenants/by-industry",
        "description": "Group tenants by industry type",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": "Array of industry statistics"
        }
      }
    },
    "documents": {
      "list": {
        "method": "GET",
        "path": "/api/documents",
        "description": "Get all documents with filtering and summary statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID",
          "floor_id": "Filter by floor ID",
          "asset_id": "Filter by asset ID",
          "tenant_id": "Filter by tenant ID",
          "vendor_id": "Filter by vendor ID",
          "document_type": "Filter by document type",
          "category": "Filter by document category",
          "status": "Filter by document status",
          "approval_status": "Filter by approval status",
          "engineering_discipline": "Filter by engineering discipline",
          "uploaded_by": "Filter by uploader name (case insensitive)",
          "tag": "Filter by tag (single or comma-separated tags, case-insensitive)",
          "tags": "Filter by tags (single or comma-separated tags, case-insensitive) - alias for 'tag'",
          "is_active": "boolean - Filter by active status",
          "is_archived": "boolean - Filter by archived status",
          "search": "Text search across all document fields including name, description, category, type, status, approval_status, tags, customer/location names, file name, version, compliance data, drawing info, approval users, version metadata, and all nested fields",
          "page": "Page number (default: 1)",
          "limit": "Items per page (default: 50, max: 100)",
          "sort": "Sort field - name, category, type, status, created_at, updated_at, customer.customer_name, location.site.site_name, location.building.building_name, location.floor.floor_name, location.asset.asset_name, file.file_meta.file_name, file.file_meta.file_size, metadata.issue_date, drawing_info.date_issued, version, version_number, approval_status, engineering_discipline",
          "order": "Sort order - asc or desc (default: desc)"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_documents": "number",
            "approved_documents": "number",
            "under_review_documents": "number",
            "draft_documents": "number",
            "archived_documents": "number",
            "documents_by_type": "object",
            "documents_by_category": "object"
          },
          "data": "Array of document objects with populated references"
        }
      },
      "getById": {
        "method": "GET",
        "path": "/api/documents/:id",
        "description": "Get single document by ID",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": "Single document object with populated references"
        }
      },
      "create": {
        "method": "POST",
        "path": "/api/documents",
        "description": "Create new document",
        "status": "IMPLEMENTED",
        "requestBody": {
          "document_title": "string",
          "description": "string",
          "version": "string (default: '1.0')",
          "document_type": "string",
          "category": "string",
          "engineering_discipline": "string",
          "customer_id": "ObjectId (reference to Customer)",
          "site_id": "ObjectId (reference to Site)",
          "building_id": "ObjectId (reference to Building)",
          "floor_id": "ObjectId (reference to Floor)",
          "asset_id": "ObjectId (reference to Asset)",
          "tenant_id": "ObjectId (reference to Tenant)",
          "vendor_id": "ObjectId (reference to Vendor)",
          "location": "string",
          "building_location": "string",
          "floor_location": "string",
          "status": "string (default: 'Draft')",
          "approval_status": "string (default: 'Pending')",
          "uploaded_by": "string",
          "author_name": "string",
          "files": "array of file objects",
          "tags": "array of tag objects",
          "access_level": "string (default: 'Internal')",
          "confidentiality": "string (default: 'Standard')",
          "review_required": "boolean (default: true)",
          "project_number": "string",
          "drawing_number": "string",
          "specification_number": "string",
          "compliance_standard": "string",
          "regulatory_requirement": "string",
          "is_active": "boolean (default: true)",
          "is_archived": "boolean (default: false)"
        },
        "response": {
          "success": true,
          "message": "Document created successfully",
          "data": "Created document object with populated references"
        }
      },
      "update": {
        "method": "PUT",
        "path": "/api/documents/:id",
        "description": "Update document with entity name population",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": "Partial document object",
        "response": {
          "success": true,
          "message": "Document updated successfully",
          "data": "Updated document object with populated entity names in location (site_name, building_name, floor_name, asset_name, asset_type, tenant_name, vendor_name)"
        },
        "notes": [
          "Response includes full location object with entity names fetched from database",
          "Entity names are dynamically populated using fetchEntityNames() helper",
          "Location structure matches GET response format for consistency",
          "Returns asset_name and asset_type for asset associations"
        ]
      },
      "bulkUpdate": {
        "method": "PUT",
        "path": "/api/documents/bulk-update",
        "description": "Bulk update multiple documents with location associations (site, building, floor, asset, tenant, vendor)",
        "status": "IMPLEMENTED",
        "requestBody": {
          "document_ids": "array of MongoDB ObjectIDs (required, non-empty)",
          "updates": {
            "site_id": "ObjectId (optional - reference to Site)",
            "building_id": "ObjectId (optional - reference to Building)",
            "floor_id": "ObjectId (optional - reference to Floor)",
            "asset_id": "ObjectId (optional - reference to Asset)",
            "tenant_id": "ObjectId (optional - reference to Tenant)",
            "vendor_id": "ObjectId (optional - reference to Vendor)"
          }
        },
        "notes": [
          "All document IDs must be valid 24-character hex ObjectIDs",
          "Entity names are automatically fetched and stored with IDs",
          "Updates are applied using MongoDB updateMany for efficiency",
          "updated_at timestamp is automatically set"
        ],
        "response": {
          "success": true,
          "message": "Documents updated successfully",
          "matched_count": "number (documents matched by IDs)",
          "modified_count": "number (documents actually modified)",
          "document_ids": "array (IDs that were updated)"
        },
        "errors": {
          "400": {
            "message": "Invalid document ID format",
            "invalid_ids": "array (IDs that failed validation)"
          }
        }
      },
      "byType": {
        "method": "GET",
        "path": "/api/documents/by-type/:type",
        "description": "Get documents by type",
        "status": "IMPLEMENTED",
        "params": {
          "type": "Document type string"
        },
        "response": {
          "success": true,
          "count": "number",
          "document_type": "string",
          "summary": {
            "total_documents": "number",
            "approved": "number",
            "under_review": "number",
            "draft": "number"
          },
          "data": "Array of document objects of the specified type"
        }
      },
      "byBuilding": {
        "method": "GET",
        "path": "/api/documents/by-building/:buildingId",
        "description": "Get documents by building",
        "status": "IMPLEMENTED",
        "params": {
          "buildingId": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "count": "number",
          "summary": {
            "total_documents": "number",
            "approved": "number",
            "under_review": "number",
            "by_category": "object"
          },
          "data": "Array of document objects for the building"
        }
      },
      "stats": {
        "method": "GET",
        "path": "/api/documents/summary/stats",
        "description": "Get document statistics",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": {
            "totalDocuments": "number",
            "approvedDocuments": "number",
            "underReviewDocuments": "number",
            "draftDocuments": "number",
            "archivedDocuments": "number"
          }
        }
      },
      "byCategory": {
        "method": "GET",
        "path": "/api/documents/by-category",
        "description": "Group documents by category",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter by customer ID",
          "site_id": "Filter by site ID",
          "building_id": "Filter by building ID"
        },
        "response": {
          "success": true,
          "data": "Array of category statistics"
        }
      },
      "getTags": {
        "method": "GET",
        "path": "/api/documents/tags",
        "description": "Get all unique tags from documents for dropdown filtering",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter tags by customer ID (optional)",
          "site_id": "Filter tags by site ID (optional)",
          "building_id": "Filter tags by building ID (optional)"
        },
        "response": {
          "success": true,
          "data": "Array of unique tag strings, alphabetically sorted (e.g., ['Compliance', 'Electrical', 'HVAC', 'Mechanical'])"
        },
        "notes": [
          "Returns flat array of unique tags from all documents",
          "Empty/null tags are filtered out",
          "Tags are sorted alphabetically for better UX",
          "Case-sensitive sorting",
          "Can be filtered by customer, site, or building for context-specific tag lists"
        ]
      },
      "getStats": {
        "method": "GET",
        "path": "/api/documents/stats",
        "description": "Get simple document count (total records only, no filters)",
        "status": "IMPLEMENTED",
        "response": {
          "success": true,
          "data": {
            "totalDocuments": "number"
          }
        },
        "notes": [
          "Returns total document count from database using Document.countDocuments({})",
          "No filtering - returns all documents in collection",
          "Faster and simpler than /api/documents/summary/stats endpoint"
        ]
      },
      "getStorageStats": {
        "method": "GET",
        "path": "/api/documents/storage/stats",
        "description": "Get document storage statistics with file counts and sizes",
        "status": "IMPLEMENTED",
        "response": {
          "success": true,
          "data": {
            "totalSizeBytes": "number",
            "totalSizeMB": "number (2 decimal places)",
            "totalSizeGB": "number (2 decimal places)",
            "displaySize": "string (e.g., '153.40 MB' or '1.25 GB')",
            "totalRecords": "number (all document records)",
            "documentsWithFiles": "number (records with file.file_meta.file_size)",
            "documentsWithoutFiles": "number (totalRecords - documentsWithFiles)"
          }
        },
        "notes": [
          "totalRecords counts ALL document records using Document.countDocuments({})",
          "documentsWithFiles counts only records with file.file_meta.file_size field",
          "File sizes aggregated from database field file.file_meta.file_size",
          "displaySize automatically switches between MB and GB based on size (threshold: 1 GB)",
          "Use totalRecords for document record count, not documentsWithFiles"
        ]
      },
      "requestApproval": {
        "method": "POST",
        "path": "/api/documents/:id/request-approval",
        "description": "Request approval for a document",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": {
          "assigned_to": "string (required) - User ID who will approve",
          "assigned_to_name": "string (optional) - Name of approver",
          "requested_by": "string (required) - User ID requesting approval",
          "requested_by_name": "string (optional) - Name of requester",
          "comments": "string (optional) - Additional comments"
        },
        "response": {
          "success": true,
          "message": "Approval request submitted successfully",
          "data": {
            "document_id": "ObjectId",
            "approval_status": "Pending",
            "approved_by": "string",
            "history_id": "ObjectId"
          }
        }
      },
      "approve": {
        "method": "PUT",
        "path": "/api/documents/:id/approve",
        "description": "Approve a document",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": {
          "approved_by": "string (required) - User ID approving the document",
          "approved_by_name": "string (optional) - Name of approver",
          "comments": "string (optional) - Approval comments"
        },
        "response": {
          "success": true,
          "message": "Document approved successfully",
          "data": {
            "document_id": "ObjectId",
            "approval_status": "Approved",
            "status": "Approved",
            "approved_by": "string",
            "history_id": "ObjectId"
          }
        }
      },
      "reject": {
        "method": "PUT",
        "path": "/api/documents/:id/reject",
        "description": "Reject a document",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": {
          "rejected_by": "string (required) - User ID rejecting the document",
          "rejected_by_name": "string (optional) - Name of rejector",
          "comments": "string (required) - Rejection reason/comments"
        },
        "response": {
          "success": true,
          "message": "Document rejected",
          "data": {
            "document_id": "ObjectId",
            "approval_status": "Rejected",
            "status": "Rejected",
            "approved_by": "string",
            "history_id": "ObjectId"
          }
        }
      },
      "revokeApproval": {
        "method": "PUT",
        "path": "/api/documents/:id/revoke-approval",
        "description": "Revoke/cancel approval request",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "requestBody": {
          "revoked_by": "string (required) - User ID revoking approval",
          "revoked_by_name": "string (optional) - Name of user revoking",
          "comments": "string (optional) - Revocation comments"
        },
        "response": {
          "success": true,
          "message": "Approval request revoked",
          "data": {
            "document_id": "ObjectId",
            "approval_status": "Revoked",
            "status": "Draft",
            "history_id": "ObjectId"
          }
        }
      },
      "pendingApprovals": {
        "method": "GET",
        "path": "/api/documents/pending-approval",
        "description": "Get all documents pending approval",
        "status": "IMPLEMENTED",
        "queryParams": {
          "assigned_to": "Filter by assigned user ID",
          "page": "Page number (default: 1)",
          "limit": "Items per page (default: 20)"
        },
        "response": {
          "success": true,
          "count": "number",
          "total": "number",
          "page": "number",
          "pages": "number",
          "data": "Array of document objects pending approval"
        }
      },
      "approvalHistory": {
        "method": "GET",
        "path": "/api/documents/:id/approval-history",
        "description": "Get approval history for a document",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "count": "number",
          "document_id": "ObjectId",
          "document_name": "string",
          "current_approval_status": "string",
          "data": "Array of approval history records (action, performed_by, comments, created_at, etc.)"
        }
      },
      "uploadVersion": {
        "method": "POST",
        "path": "/api/documents/:id/versions",
        "description": "Upload new version of existing document with file upload",
        "status": "IMPLEMENTED",
        "params": {
          "id": "MongoDB ObjectID (current document ID)"
        },
        "requestBody": {
          "file": "multipart/form-data (required) - Document file to upload",
          "uploaded_by": "JSON string (required) - { user_id, user_name, email }",
          "change_notes": "string (optional) - Notes about changes in this version",
          "version_number": "string (optional) - Manual version number (X.Y format, auto-calculated if not provided)",
          "file_hash": "string (optional) - File hash for integrity verification"
        },
        "notes": [
          "Creates minimal version document with ONLY file data and metadata",
          "Version documents store: file, version_metadata (WHO, WHEN, WHERE), minimal reference fields",
          "Automatic version numbering: 1.0 -> 1.1 (minor), 1.9 -> 2.0 (major)",
          "File uploaded to S3: documents/documentGroupId/year/month/day/timestamp-uuid-vX.Y_filename",
          "Previous current version marked as is_current_version: false",
          "New version marked as is_current_version: true",
          "All versions linked via document_group_id"
        ],
        "response": {
          "success": true,
          "message": "New version uploaded successfully",
          "data": {
            "_id": "ObjectId (new version document ID)",
            "name": "string (Document Name - v2.0)",
            "category": "Version",
            "type": "Version",
            "file": "object (S3 file metadata)",
            "version": "string (2.0)",
            "version_number": "string (2.0)",
            "version_sequence": "number (incremental sequence)",
            "is_current_version": true,
            "document_group_id": "string",
            "version_metadata": {
              "uploaded_by": {
                "user_id": "string",
                "user_name": "string",
                "email": "string"
              },
              "upload_timestamp": "Date",
              "change_notes": "string",
              "superseded_version": "string (previous version number)",
              "file_changes": {
                "original_filename": "string",
                "file_size_bytes": "number",
                "file_hash": "string"
              }
            }
          }
        }
      },
      "getVersions": {
        "method": "GET",
        "path": "/api/documents/versions/:documentGroupId",
        "description": "Get all versions of a document by document group ID",
        "status": "IMPLEMENTED",
        "params": {
          "documentGroupId": "string (document_group_id to retrieve all versions)"
        },
        "response": {
          "success": true,
          "data": [
            {
              "_id": "ObjectId",
              "version_number": "string (1.0, 2.0, etc.)",
              "version_sequence": "number (1, 2, 3...)",
              "is_current_version": "boolean",
              "created_at": "Date (upload timestamp)",
              "created_by": "string (user name)",
              "file_name": "string",
              "file_size": "number (bytes)",
              "file_url": "string (S3 URL)",
              "change_notes": "string (version change notes)"
            }
          ]
        }
      },
      "restoreVersion": {
        "method": "POST",
        "path": "/api/documents/versions/:versionId/restore",
        "description": "Restore a previous version as new current version",
        "status": "IMPLEMENTED",
        "params": {
          "versionId": "MongoDB ObjectID (version to restore)"
        },
        "requestBody": {
          "restored_by": "JSON string (required) - { user_id, user_name, email }"
        },
        "notes": [
          "Creates new minimal version document with restored file",
          "Marks previous current version as is_current_version: false",
          "Increments version_number automatically (e.g., 2.0 -> 3.0)",
          "Change notes automatically set to 'Restored from version X.Y'",
          "Maintains version history continuity"
        ],
        "response": {
          "success": true,
          "message": "Version X.Y restored as version Z.A",
          "data": {
            "_id": "ObjectId (new restored version ID)",
            "version_number": "string (new version number)",
            "version_sequence": "number",
            "is_current_version": true,
            "document_group_id": "string",
            "version_metadata": {
              "uploaded_by": "object (user who restored)",
              "upload_timestamp": "Date",
              "change_notes": "Restored from version X.Y",
              "superseded_version": "string"
            }
          }
        }
      }
    },
    "hierarchy": {
      "get": {
        "method": "GET",
        "path": "/api/hierarchy/:customer_id",
        "description": "Get hierarchical structure for customer (sites > buildings > floors > assets)",
        "status": "IMPLEMENTED",
        "params": {
          "customer_id": "MongoDB ObjectID"
        },
        "queryParams": {
          "site_id": "Filter by specific site ID",
          "building_id": "Filter by specific building ID - returns building-level hierarchy only",
          "floor_number": "Filter by floor number within a building (requires building_id) - returns floor-level hierarchy",
          "floor_level": "Filter by exact floor level string (e.g., 'Lvl 20', 'GF') within a building (requires building_id) - returns floor-level hierarchy"
        },
        "response": {
          "success": true,
          "data": "Array of hierarchical nodes (sites/buildings with nested floors and assets)",
          "metadata": {
            "total_sites": "number",
            "total_buildings": "number",
            "total_assets": "number",
            "generated_floors": "number",
            "view_level": "string (full|building|floor|floor_level)",
            "level": "string (only present when floor_level filtering is used)"
          }
        }
      },
      "stats": {
        "method": "GET",
        "path": "/api/hierarchy/:customer_id/stats",
        "description": "Get hierarchy statistics for customer",
        "status": "IMPLEMENTED",
        "params": {
          "customer_id": "MongoDB ObjectID"
        },
        "response": {
          "success": true,
          "data": {
            "sites": {
              "totalSites": "number",
              "activeSites": "number",
              "totalBuildings": "number",
              "totalAssets": "number"
            },
            "buildings": {
              "totalBuildings": "number",
              "activeBuildings": "number",
              "totalFloors": "number",
              "avgEnergyRating": "number"
            },
            "assets": {
              "totalAssets": "number",
              "activeAssets": "number",
              "avgAge": "number"
            }
          }
        }
      }
    },
    "dropdowns": {
      "getAllDropdowns": {
        "method": "GET",
        "path": "/api/dropdowns",
        "description": "Get all dropdown values for all modules from database (Settings collection)",
        "status": "IMPLEMENTED",
        "notes": "Returns dropdown values stored in Settings collection with setting_key='dropdown_values'. Falls back to constants if database unavailable.",
        "response": {
          "success": true,
          "data": {
            "customer_industry_types": "Array of strings",
            "customer_organisation_sizes": "Array of strings (1-10, 11-50, 51-200, 201-500, 501-1000, 1001+)",
            "contact_role_types": "Array of strings",
            "contact_contact_types": "Array of strings",
            "contact_platform_access": "Array of strings",
            "contact_method_types": "Array of strings (Email, Phone, SMS, WhatsApp)",
            "site_site_types": "Array of strings",
            "site_site_statuses": "Array of strings",
            "site_site_security_levels": "Array of strings",
            "site_site_states": "Array of strings (NSW, VIC, QLD, etc.)",
            "building_building_types": "Array of strings",
            "building_building_statuses": "Array of strings",
            "floor_floor_types": "Array of strings",
            "floor_floor_statuses": "Array of strings",
            "floor_floor_area_units": "Array of strings",
            "tenant_tenant_industry_types": "Array of strings",
            "tenant_tenant_lease_statuses": "Array of strings",
            "tenant_tenant_area_units": "Array of strings",
            "tenant_tenant_rent_frequencies": "Array of strings",
            "document_document_types": "Array of strings",
            "document_document_categories": "Array of strings",
            "document_document_statuses": "Array of strings",
            "document_document_engineering_disciplines": "Array of strings",
            "document_document_approval_statuses": "Array of strings",
            "asset_categories": "Array of strings",
            "asset_statuses": "Array of strings",
            "asset_conditions": "Array of strings",
            "vendor_contractor_types": "Array of strings",
            "vendor_consultant_specialisations": "Array of strings",
            "vendor_certification_authorities": "Array of strings",
            "vendor_services_provided": "Array of strings",
            "vendor_license_types": "Array of strings",
            "vendor_insurance_types": "Array of strings",
            "vendor_status_types": "Array of strings",
            "vendor_business_types": "Array of strings",
            "vendor_vendor_statuses": "Array of strings"
          },
          "source": "database | fallback_constants",
          "last_updated": "ISO DateTime"
        }
      },
      "getModuleDropdowns": {
        "method": "GET",
        "path": "/api/dropdowns/:module",
        "description": "Get dropdown values for a specific module from database",
        "status": "IMPLEMENTED",
        "params": {
          "module": "Module name (customer, contact, site, building, floor, tenant, document, asset, vendor)"
        },
        "response": {
          "success": true,
          "module": "string",
          "data": "Object with dropdown fields for the module",
          "source": "database | fallback_constants"
        }
      },
      "getFieldDropdown": {
        "method": "GET",
        "path": "/api/dropdowns/:module/:field",
        "description": "Get specific field dropdown values from database",
        "status": "IMPLEMENTED",
        "params": {
          "module": "Module name (customer, contact, site, building, floor, tenant, document, asset, vendor)",
          "field": "Field name (e.g., industry_types, statuses, types)"
        },
        "response": {
          "success": true,
          "module": "string",
          "field": "string",
          "data": "Array of dropdown values",
          "source": "database | fallback_constants"
        }
      },
      "updateDropdowns": {
        "method": "POST",
        "path": "/api/dropdowns",
        "description": "Update all dropdown values and persist to database (Settings collection)",
        "status": "IMPLEMENTED",
        "notes": "Updates dropdown values in Settings collection with setting_key='dropdown_values'. Changes are persisted and will be used for all future requests.",
        "requestBody": {
          "description": "Flattened object with module_field keys",
          "example": {
            "customer_industry_types": ["Type 1", "Type 2"],
            "site_site_statuses": ["Active", "Inactive"],
            "updated_by": "string (optional, defaults to 'user')"
          }
        },
        "response": {
          "success": true,
          "message": "Dropdown values updated successfully and saved to database",
          "data": "Updated flattened dropdown object",
          "last_updated": "ISO DateTime"
        }
      },
      "getCustomersDropdown": {
        "method": "GET",
        "path": "/api/dropdowns/entities/customers",
        "description": "Get all active customers for dropdown selection",
        "status": "IMPLEMENTED",
        "response": {
          "success": true,
          "count": "number",
          "data": [
            {
              "id": "MongoDB ObjectID",
              "label": "Organisation name",
              "value": "MongoDB ObjectID"
            }
          ]
        }
      },
      "getSitesDropdown": {
        "method": "GET",
        "path": "/api/dropdowns/entities/sites",
        "description": "Get all active sites for dropdown selection",
        "status": "IMPLEMENTED",
        "queryParams": {
          "customer_id": "Filter sites by customer ID"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": [
            {
              "id": "MongoDB ObjectID",
              "label": "Site name",
              "value": "MongoDB ObjectID",
              "site_name": "string",
              "customer_id": "MongoDB ObjectID"
            }
          ]
        }
      },
      "getBuildingsDropdown": {
        "method": "GET",
        "path": "/api/dropdowns/entities/buildings",
        "description": "Get all active buildings for dropdown selection",
        "status": "IMPLEMENTED",
        "queryParams": {
          "site_id": "Filter buildings by site ID",
          "customer_id": "Filter buildings by customer ID"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": [
            {
              "id": "MongoDB ObjectID",
              "label": "Building name",
              "value": "MongoDB ObjectID",
              "building_name": "string",
              "site_id": "MongoDB ObjectID",
              "customer_id": "MongoDB ObjectID"
            }
          ]
        }
      },
      "getFloorsDropdown": {
        "method": "GET",
        "path": "/api/dropdowns/entities/floors",
        "description": "Get all active floors for dropdown selection",
        "status": "IMPLEMENTED",
        "queryParams": {
          "building_id": "Filter floors by building ID",
          "site_id": "Filter floors by site ID",
          "customer_id": "Filter floors by customer ID"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": [
            {
              "id": "MongoDB ObjectID",
              "label": "Floor name (e.g., 'Level 1' or 'Lvl 20')",
              "value": "MongoDB ObjectID",
              "floor_name": "string",
              "floor_level": "string",
              "building_id": "MongoDB ObjectID",
              "site_id": "MongoDB ObjectID",
              "customer_id": "MongoDB ObjectID"
            }
          ]
        }
      },
      "getAssetsDropdown": {
        "method": "GET",
        "path": "/api/dropdowns/entities/assets",
        "description": "Get all active assets for dropdown selection",
        "status": "IMPLEMENTED",
        "queryParams": {
          "floor_id": "Filter assets by floor ID",
          "building_id": "Filter assets by building ID",
          "site_id": "Filter assets by site ID",
          "customer_id": "Filter assets by customer ID",
          "category": "Filter assets by category",
          "status": "Filter assets by status",
          "condition": "Filter assets by condition"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": [
            {
              "id": "MongoDB ObjectID",
              "label": "Asset number/name",
              "value": "MongoDB ObjectID",
              "asset_no": "string",
              "category": "string",
              "status": "string",
              "floor_id": "MongoDB ObjectID",
              "building_id": "MongoDB ObjectID",
              "site_id": "MongoDB ObjectID",
              "customer_id": "MongoDB ObjectID"
            }
          ]
        }
      },
      "getTenantsDropdown": {
        "method": "GET",
        "path": "/api/dropdowns/entities/tenants",
        "description": "Get all active tenants for dropdown selection",
        "status": "IMPLEMENTED",
        "queryParams": {
          "building_id": "Filter tenants by building ID",
          "site_id": "Filter tenants by site ID",
          "customer_id": "Filter tenants by customer ID",
          "floor_id": "Filter tenants by floor ID",
          "tenant_status": "Filter tenants by status"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": [
            {
              "id": "MongoDB ObjectID",
              "label": "Tenant name",
              "value": "MongoDB ObjectID",
              "tenant_name": "string",
              "building_id": "MongoDB ObjectID",
              "site_id": "MongoDB ObjectID",
              "customer_id": "MongoDB ObjectID"
            }
          ]
        }
      },
      "getVendorsDropdown": {
        "method": "GET",
        "path": "/api/dropdowns/entities/vendors",
        "description": "Get all active vendors for dropdown selection",
        "status": "IMPLEMENTED",
        "queryParams": {
          "category": "Filter vendors by category"
        },
        "response": {
          "success": true,
          "count": "number",
          "data": [
            {
              "id": "MongoDB ObjectID",
              "label": "Vendor name",
              "value": "MongoDB ObjectID",
              "vendor_name": "string",
              "category": "string"
            }
          ]
        }
      },
      "getDocumentTags": {
        "method": "GET",
        "path": "/api/dropdowns/document-tags",
        "description": "Get all unique document tags for dropdown selection",
        "status": "IMPLEMENTED",
        "response": {
          "success": true,
          "count": "number",
          "data": [
            {
              "id": "string (tag value)",
              "label": "string (tag value)",
              "value": "string (tag value)"
            }
          ]
        }
      }
    }
  },
  "dataStructures": {
    "customerStructure": {
      "_id": "MongoDB ObjectID",
      "organisation": {
        "organisation_name": "string",
        "email_domain": "string",
        "logo_url": "string",
        "building_image": "string",
        "notes": "string",
        "metadata": "object"
      },
      "company_profile": {
        "business_number": "string (ABN format)",
        "company_number": "string (ACN format)",
        "trading_name": "string",
        "industry_type": "string",
        "organisation_size": "string"
      },
      "business_address": {
        "street": "string",
        "suburb": "string",
        "state": "string (NSW|VIC|QLD|WA|SA|TAS|ACT|NT)",
        "postcode": "string (4 digits)"
      },
      "postal_address": {
        "street": "string",
        "suburb": "string",
        "state": "string (NSW|VIC|QLD|WA|SA|TAS|ACT|NT)",
        "postcode": "string (4 digits)"
      },
      "contact_methods": [
        {
          "_id": "MongoDB ObjectID (auto-generated)",
          "full_name": "string",
          "job_title": "string",
          "department": "string",
          "role_type": "string (Primary|Billing|Technical|General|Emergency|Project)",
          "contact_type": "string (Internal|External|Supplier|Customer|Contractor|Consultant|Emergency|Billing|Technical)",
          "platform_access": "string (Administrative|Operational|View Only|No Access)",
          "contact_methods": [
            {
              "_id": "MongoDB ObjectID (auto-generated)",
              "method_type": "string (Email|Phone|SMS|WhatsApp)",
              "method_value": "string",
              "label": "string",
              "is_primary": "boolean"
            }
          ],
          "method_type": "string (Legacy field for backward compatibility)",
          "method_value": "string (Legacy field for backward compatibility)",
          "label": "string (Legacy field for backward compatibility)",
          "is_primary": "boolean (Legacy field for backward compatibility)",
          "createdAt": "DateTime",
          "updatedAt": "DateTime"
        }
      ],
      "metadata": [
        {
          "key": "string",
          "value": "string"
        }
      ],
      "is_active": "boolean",
      "createdAt": "DateTime",
      "updatedAt": "DateTime",
      "__v": "number (MongoDB version key)",
      "full_business_address": "string (virtual field)",
      "full_postal_address": "string (virtual field)",
      "primary_contact": "object (virtual field)",
      "display_name": "string (virtual field)",
      "abn_display": "string (virtual field)",
      "id": "string (virtual field)"
    },
    "siteStructure": {
      "_id": "MongoDB ObjectID",
      "site_name": "string",
      "address": "string or object (structured with street, suburb, state, postcode, latitude, longitude, full_address)",
      "status": "string (Active, Under Construction, Planning, Inactive)",
      "land_area": "number (square metres, required, min: 0, default: 0)",
      "land_area_unit": "string (default: 'm²')",
      "local_council": "string (local government area)",
      "security_level": "string (enum: 'Public Access', 'Controlled', 'High Security')",
      "shared_facilities": "array of strings (options: 'Car parks', 'Loading docks', default: [])",
      "note": "string (additional site notes)",
      "buildings_count": "number",
      "floors_count": "number",
      "tenants_count": "number",
      "assets_count": "number",
      "manager": {
        "name": "string",
        "email": "string",
        "phone": "string",
        "title": "string"
      },
      "customer_id": "ObjectId (reference to Customer)",
      "metadata": [
        {
          "key": "string",
          "value": "string"
        }
      ],
      "is_active": "boolean",
      "created_date": "DateTime",
      "createdAt": "DateTime",
      "updatedAt": "DateTime"
    },
    "buildingStructure": {
      "_id": "MongoDB ObjectID",
      "building_name": "string",
      "building_code": "string",
      "image_url": "string",
      "site_id": "ObjectId (reference to Site)",
      "manager": "object { name, email, phone, title }",
      "customer_id": "ObjectId (reference to Customer)",
      "building_type": "string (required)",
      "building_grade": "string (Grade A, Grade B, Grade C, Premium)",
      "primary_use": "string (required, enum: 'Office', 'Retail', 'Industrial', 'Warehouse', 'Mixed Use', 'Healthcare', 'Educational', 'Government', 'Hospitality', 'Other')",
      "last_inspection_date": "Date (optional, for compliance tracking - AS1851, AS3666)",
      "accessibility_features": "array of strings (enum: 'lifts', 'ramps', 'disabled_parking', 'accessible_toilets', 'hearing_loops', 'braille_signage', 'automatic_doors', 'wheelchair_access', default: [])",
      "parking_spaces": "number (min: 0, default: 0)",
      "number_of_floors": "number (required, min: 1)",
      "total_area": "number (square metres)",
      "year_built": "number",
      "nabers_rating": "number (0-6 stars, Australian energy rating)",
      "status": "string",
      "total_floors": "number",
      "active_floors": "number",
      "total_assets": "number",
      "avg_occupancy": "number (0-100)",
      "metadata": [
        {
          "key": "string",
          "value": "string"
        }
      ],
      "is_active": "boolean",
      "createdAt": "DateTime",
      "updatedAt": "DateTime"
    },
    "floorStructure": {
      "_id": "MongoDB ObjectID",
      "site_id": "ObjectId (reference to Site)",
      "building_id": "ObjectId (reference to Building)",
      "customer_id": "ObjectId (reference to Customer)",
      "floor_name": "string (required)",
      "floor_number": "number",
      "floor_type": "string (required, enum: 'Office', 'Retail', 'Plant Room', 'Lab', 'Common Area', 'Residential')",
      "maximum_occupancy": "number (min: 0, default: 0) - renamed from occupancy",
      "occupancy": "number (virtual field, maps to maximum_occupancy for backward compatibility)",
      "occupancy_type": "string (enum: 'Single Tenant', 'Multi Tenant', 'Common Area')",
      "access_control": "string (enum: 'Public', 'Keycard Required', 'Restricted')",
      "fire_compartment": "string (emergency planning/safety designation)",
      "hvac_zones": "number (min: 0, climate control zones)",
      "special_features": "array of strings (enum: 'Equipment Room', 'Common Area', 'Server Room', 'Meeting Room', 'Kitchen', 'Storage', default: [])",
      "area_number": "number",
      "area_unit": "string (m²|sq ft, default: m²)",
      "floor_area": "number",
      "floor_area_unit": "string (m²|sq ft, default: m²)",
      "ceiling_height": "number (metres)",
      "ceiling_height_unit": "string (m|ft, default: m)",
      "status": "string (default: Active)",
      "assets_count": "number (default: 0)",
      "metadata": [
        {
          "key": "string",
          "value": "string"
        }
      ],
      "is_active": "boolean",
      "createdAt": "DateTime",
      "updatedAt": "DateTime"
    },
    "assetStructure": {
      "_id": "MongoDB ObjectID",
      "customer_id": "ObjectId (reference to Customer)",
      "site_id": "ObjectId (reference to Site)",
      "building_id": "ObjectId (reference to Building)",
      "asset_id": "string",
      "asset_no": "string",
      "device_id": "string",
      "status": "string (Active, Operational, Maintenance Required)",
      "category": "string (e.g., Boiler System, Chiller System)",
      "type": "string (e.g., Boiler - Gas Fired)",
      "condition": "string (Good, Fair, Poor)",
      "make": "string",
      "model": "string",
      "serial": "string",
      "refrigerant": "string (e.g., R718 - Water)",
      "refrigerant_capacity": "string",
      "refrigerant_consumption": "string",
      "level": "string (e.g., Lvl 20, GF)",
      "area": "string (e.g., Level 20 plant room)",
      "owner": "string (e.g., Landlord, Tenant)",
      "da19_life_expectancy": "string (e.g., 20-25 Yrs)",
      "service_status": "string (e.g., Contracted)",
      "date_of_installation": "Date",
      "age": "number",
      "last_test_date": "Date",
      "last_test_result": "string (Pass, Fail)",
      "purchase_cost_aud": "number",
      "current_book_value_aud": "number",
      "weight_kgs": "number",
      "is_active": "boolean",
      "createdAt": "DateTime",
      "updatedAt": "DateTime"
    },
    "tenantStructure": {
      "_id": "MongoDB ObjectID",
      "site_id": "ObjectId (reference to Site)",
      "building_id": "ObjectId (reference to Building)",
      "floor_id": "ObjectId (reference to Floor)",
      "customer_id": "ObjectId (reference to Customer)",
      "tenant_legal_name": "string",
      "tenant_trading_name": "string",
      "abn": "string (11 digits)",
      "acn": "string (9 digits)",
      "lease_type": "string",
      "lease_start_date": "Date",
      "lease_end_date": "Date",
      "lease_duration_months": "number",
      "occupied_area": "number",
      "occupied_area_unit": "string (default: m²)",
      "number_of_employees": "number",
      "allocated_parking_spaces": "number",
      "operating_hours_start": "string (HH:MM)",
      "operating_hours_end": "string (HH:MM)",
      "operating_days": "string",
      "primary_contact_name": "string",
      "primary_contact_title": "string",
      "primary_contact_phone": "string",
      "primary_contact_email": "string",
      "billing_contact_name": "string",
      "billing_contact_email": "string",
      "emergency_contacts": [
        {
          "name": "string",
          "phone": "string",
          "relationship": "string"
        }
      ],
      "industry_type": "string",
      "business_category": "string",
      "occupancy_classification": "string",
      "utilities_included": ["string"],
      "services_included": ["string"],
      "special_requirements": "string",
      "rental_rate": "number",
      "rental_rate_unit": "string (default: per sqm/year)",
      "bond_amount": "number",
      "outgoings_estimate": "number",
      "tenant_status": "string (default: Active)",
      "move_in_date": "Date",
      "move_out_date": "Date",
      "notes": "string",
      "compliance_notes": "string",
      "is_active": "boolean",
      "createdAt": "DateTime",
      "updatedAt": "DateTime"
    },
    "documentStructure": {
      "_id": "MongoDB ObjectID",
      "document_title": "string",
      "description": "string",
      "version": "string (default: '1.0')",
      "document_type": "string",
      "category": "string",
      "engineering_discipline": "string",
      "location": "string",
      "building_location": "string",
      "floor_location": "string",
      "status": "string (default: 'Draft')",
      "approval_status": "string (default: 'Pending')",
      "files": [
        {
          "file_name": "string",
          "file_type": "string",
          "file_size": "number",
          "file_size_unit": "string (default: MB)",
          "file_url": "string",
          "upload_date": "Date"
        }
      ],
      "uploaded_by": "string",
      "author_name": "string",
      "uploaded_date": "Date",
      "tags": [
        {
          "name": "string",
          "color": "string"
        }
      ],
      "access_level": "string (default: 'Internal')",
      "confidentiality": "string (default: 'Standard')",
      "review_required": "boolean (default: true)",
      "reviewer_name": "string",
      "review_date": "Date",
      "approval_date": "Date",
      "approved_by": "string",
      "revision_history": [
        {
          "version": "string",
          "description": "string",
          "date": "Date",
          "author": "string"
        }
      ],
      "customer_id": "ObjectId (reference to Customer)",
      "site_id": "ObjectId (reference to Site)",
      "building_id": "ObjectId (reference to Building)",
      "floor_id": "ObjectId (reference to Floor)",
      "asset_id": "ObjectId (reference to Asset)",
      "project_number": "string",
      "drawing_number": "string",
      "specification_number": "string",
      "compliance_standard": "string",
      "regulatory_requirement": "string",
      "is_active": "boolean (default: true)",
      "is_archived": "boolean (default: false)",
      "createdAt": "DateTime",
      "updatedAt": "DateTime"
    }
  },
  "sampleApiCalls": {
    "getAllCustomers": "curl -X GET http://localhost:30001/api/customers",
    "getCustomerById": "curl -X GET http://localhost:30001/api/customers/68d395f9c7ad6627ad607f07",
    "getCustomerStats": "curl -X GET http://localhost:30001/api/customers/68d3929ae4c5d9b3e920a9df/stats",
    "createCustomer": "curl -X POST http://localhost:30001/api/customers -H 'Content-Type: application/json' -d '{\"organisation\":{\"organisation_name\":\"Test Company\",\"building_image\":\"https://example.com/building.jpg\"}}'",
    "updateCustomer": "curl -X PUT http://localhost:30001/api/customers/68d395f9c7ad6627ad607f07 -H 'Content-Type: application/json' -d '{\"organisation\":{\"organisation_name\":\"Updated Company\"}}'",
    "getCustomerContacts": "curl -X GET http://localhost:30001/api/customers/68d395f9c7ad6627ad607f07/contacts",
    "getPrimaryContact": "curl -X GET http://localhost:30001/api/customers/68d395f9c7ad6627ad607f07/contacts/primary",
    "createContact": "curl -X POST http://localhost:30001/api/customers/68d395f9c7ad6627ad607f07/contacts -H 'Content-Type: application/json' -d '{\"full_name\":\"John Smith\",\"job_title\":\"Building Manager\",\"method_type\":\"Email\",\"method_value\":\"john@company.com\",\"is_primary\":true}'",
    "updateContact": "curl -X PUT http://localhost:30001/api/customers/68d395f9c7ad6627ad607f07/contacts/60d5ecb74e4b3c001f647b8c -H 'Content-Type: application/json' -d '{\"job_title\":\"Senior Building Manager\"}'",
    "searchContacts": "curl -X GET 'http://localhost:30001/api/customers/68d395f9c7ad6627ad607f07/contacts/search?q=john'",
    "searchContactsMain": "curl -X GET 'http://localhost:30001/api/customers/68d395f9c7ad6627ad607f07/contacts?search=manager'",
    "addContactMethod": "curl -X POST http://localhost:30001/api/customers/68d3929ae4c5d9b3e920a9df/contacts/60d5ecb74e4b3c001f647b8c/methods -H 'Content-Type: application/json' -d '{\"method_type\":\"Phone\",\"method_value\":\"+61400123456\",\"label\":\"Mobile\",\"is_primary\":false}'",
    "updateContactMethod": "curl -X PUT http://localhost:30001/api/customers/68d3929ae4c5d9b3e920a9df/contacts/60d5ecb74e4b3c001f647b8c/methods/methodId123 -H 'Content-Type: application/json' -d '{\"method_value\":\"+61400999888\",\"label\":\"New Mobile\"}'",
    "deleteContactMethod": "curl -X DELETE http://localhost:30001/api/customers/68d3929ae4c5d9b3e920a9df/contacts/60d5ecb74e4b3c001f647b8c/methods/methodId123",
    "getSitesByCustomer": "curl -X GET 'http://localhost:30001/api/sites?customer_id=68d395f9c7ad6627ad607f07'",
    "searchSites": "curl -X GET 'http://localhost:30001/api/sites?search=melbourne'",
    "searchBuildings": "curl -X GET 'http://localhost:30001/api/buildings?search=office'",
    "searchFloors": "curl -X GET 'http://localhost:30001/api/floors?search=level'",
    "searchTenants": "curl -X GET 'http://localhost:30001/api/tenants?search=retail'",
    "getBuildingStats": "curl -X GET http://localhost:30001/api/buildings/summary/stats",
    "getFloorsByBuilding": "curl -X GET http://localhost:30001/api/floors/by-building/60d5ecb74e4b3c001f647b8c",
    "getAssetsWithWarrantyExpiring": "curl -X GET 'http://localhost:30001/api/assets?warranty_expired=true'",
    "getAssetsByBuilding": "curl -X GET http://localhost:30001/api/assets/by-building/68d3e1de1bfdc3d6bd004643",
    "getAssetsByCategory": "curl -X GET 'http://localhost:30001/api/assets/by-category?building_id=68d3e1de1bfdc3d6bd004643'",
    "getAssetsByLevel": "curl -X GET 'http://localhost:30001/api/assets?building_id=68d3e1de1bfdc3d6bd004643&level=Lvl+20'",
    "searchAssets": "curl -X GET 'http://localhost:30001/api/assets?search=boiler'",
    "getAssetsByAge": "curl -X GET 'http://localhost:30001/api/assets?age_min=5&age_max=10'",
    "getAssetsByCost": "curl -X GET 'http://localhost:30001/api/assets?purchase_cost_min=1000&purchase_cost_max=5000'",
    "getTenantsByIndustry": "curl -X GET http://localhost:30001/api/building-tenants/by-industry",
    "searchDocuments": "curl -X GET 'http://localhost:30001/api/documents?search=HVAC'",
    "getHierarchy": "curl -X GET http://localhost:30001/api/hierarchy/68d3929ae4c5d9b3e920a9df",
    "getHierarchyByBuilding": "curl -X GET 'http://localhost:30001/api/hierarchy/68d3929ae4c5d9b3e920a9df?building_id=68d3e1de1bfdc3d6bd004643'",
    "getHierarchyByFloorNumber": "curl -X GET 'http://localhost:30001/api/hierarchy/68d3929ae4c5d9b3e920a9df?building_id=68d3e1de1bfdc3d6bd004643&floor_number=5'",
    "getHierarchyByFloorLevel": "curl -X GET 'http://localhost:30001/api/hierarchy/68d3929ae4c5d9b3e920a9df?building_id=68d3e1de1bfdc3d6bd004643&floor_level=Lvl+20'",
    "getHierarchyStats": "curl -X GET http://localhost:30001/api/hierarchy/68d3929ae4c5d9b3e920a9df/stats",
    "createFloor": "curl -X POST http://localhost:30001/api/floors -H 'Content-Type: application/json' -d '{\\\"floor_name\\\":\\\"Level 5\\\",\\\"floor_number\\\":5,\\\"floor_type\\\":\\\"Office\\\",\\\"building_id\\\":\\\"68d3e1de1bfdc3d6bd004643\\\",\\\"floor_area\\\":750,\\\"floor_area_unit\\\":\\\"m²\\\",\\\"assets_count\\\":15,\\\"status\\\":\\\"Active\\\"}'",
    "updateFloor": "curl -X PUT http://localhost:30001/api/floors/68d7da2fb488fd9b798db6bc -H 'Content-Type: application/json' -d '{\\\"floor_name\\\":\\\"Updated Floor\\\",\\\"occupancy\\\":50,\\\"assets_count\\\":20}'",
    "getFloorStats": "curl -X GET 'http://localhost:30001/api/floors/summary/stats?building_id=68d3e1de1bfdc3d6bd004643'",
    "getAllDropdowns": "curl -X GET http://localhost:30001/api/dropdowns",
    "getModuleDropdowns": "curl -X GET http://localhost:30001/api/dropdowns/customer",
    "getCustomersDropdown": "curl -X GET http://localhost:30001/api/dropdowns/entities/customers",
    "getSitesDropdown": "curl -X GET http://localhost:30001/api/dropdowns/entities/sites",
    "getSitesDropdownByCustomer": "curl -X GET 'http://localhost:30001/api/dropdowns/entities/sites?customer_id=68d395f9c7ad6627ad607f07'",
    "getBuildingsDropdown": "curl -X GET http://localhost:30001/api/dropdowns/entities/buildings",
    "getBuildingsDropdownBySite": "curl -X GET 'http://localhost:30001/api/dropdowns/entities/buildings?site_id=68d3e1de1bfdc3d6bd004643'",
    "getFloorsDropdown": "curl -X GET http://localhost:30001/api/dropdowns/entities/floors",
    "getFloorsDropdownByBuilding": "curl -X GET 'http://localhost:30001/api/dropdowns/entities/floors?building_id=68d3e1de1bfdc3d6bd004643'",
    "getAssetsDropdown": "curl -X GET http://localhost:30001/api/dropdowns/entities/assets",
    "getAssetsDropdownByFloor": "curl -X GET 'http://localhost:30001/api/dropdowns/entities/assets?floor_id=68d7da2fb488fd9b798db6bc'",
    "getTenantsDropdown": "curl -X GET http://localhost:30001/api/dropdowns/entities/tenants",
    "getVendorsDropdown": "curl -X GET http://localhost:30001/api/dropdowns/entities/vendors",
    "getVendorsDropdownByCategory": "curl -X GET 'http://localhost:30001/api/dropdowns/entities/vendors?category=hvac'",
    "getDocumentTags": "curl -X GET http://localhost:30001/api/dropdowns/document-tags",
    "healthCheck": "curl -X GET http://localhost:30001/health"
  },
  "errorResponses": {
    "400": {
      "success": false,
      "message": "Validation error message",
      "error": "Detailed error information"
    },
    "404": {
      "success": false,
      "message": "Resource not found",
      "error": "Resource identifier details"
    },
    "500": {
      "success": false,
      "message": "Internal server error",
      "error": "Error details"
    }
  },
  "commonQueryParameters": {
    "pagination": {
      "page": "integer (default: 1) - Page number",
      "limit": "integer (default: 10, max: 100) - Items per page"
    },
    "filtering": {
      "is_active": "boolean - Filter by active status",
      "customer_id": "ObjectId - Filter by customer",
      "site_id": "ObjectId - Filter by site",
      "building_id": "ObjectId - Filter by building",
      "status": "string - Filter by status"
    },
    "sorting": {
      "sortBy": "string - Field to sort by",
      "sortOrder": "string (asc|desc) - Sort direction"
    }
  },
  "databaseInfo": {
    "connectionString": "mongodb+srv://shriramsoft_db_user:nbNKl1V3TpBAQhfo@cluster0.mulczg0.mongodb.net/hub_fulqrom",
    "database": "hub_fulqrom",
    "collections": [
      "customers",
      "sites",
      "buildings",
      "floors",
      "tenants",
      "assets",
      "building_tenants",
      "documents",
      "vendors",
      "settings"
    ]
  },
  "australianStandards": {
    "states": ["NSW", "VIC", "QLD", "WA", "SA", "TAS", "ACT", "NT"],
    "postcodeFormat": "4 digits (e.g., 2000, 3000, 4000)",
    "abnFormat": "11 digits with spaces (e.g., '12 345 678 901')",
    "acnFormat": "9 digits with spaces (e.g., '123 456 789')",
    "dateFormat": "DD/MM/YYYY",
    "currency": "AUD with space separator (e.g., '$42 850')",
    "areaUnit": "square metres (m²)",
    "distanceUnit": "metres (m)"
  },
  "notes": {
    "apiVersion": "This API reference reflects the current implementation as of 2025-10-05 (v1.2.0)",
    "routePrefix": "All API routes are prefixed with '/api/'",
    "tenantRouteDiscrepancy": "Tenant routes use '/api/building-tenants' in server.js but model collection is 'building_tenants'",
    "populatedFields": "Most GET requests populate referenced fields for better data context",
    "summaryStats": "List endpoints include calculated summary statistics where applicable",
    "virtualFields": "Models include virtual fields for computed values (formatted dates, display names, etc.)",
    "textSearch": "Documents collection supports comprehensive text search across 40+ fields including: basic fields (name, description, category, type, status, version), hierarchical data (customer, site, building, floor, tenant, vendor, asset names), file metadata (filename, type, extension), compliance data (certification number, frameworks, status), drawing info (status, prepared by, approved by, scale), approval workflow (status, approved by, access users), audit fields (created by), and version metadata (user names, emails, change notes). Case-insensitive regex matching.",
    "aggregationSupport": "Statistics endpoints use MongoDB aggregation for efficient data processing",
    "validationStrategy": "Comprehensive validation on API level with minimal frontend validation",
    "errorHandling": "Consistent error response format across all endpoints",
    "securityFeatures": "CORS configured, helmet for security headers, input sanitization",
    "hierarchyApi": "New hierarchy API provides nested site > building > floor > asset structure with building-level and floor-level filtering",
    "buildingEnumRemoval": "Building type and status enum restrictions removed to allow flexible values",
    "assetBuildingLink": "Assets now include building_id field for proper building-level hierarchy filtering",
    "floorModelEnhanced": "Floor model updated with comprehensive field set including assets_count, dual area systems, occupancy tracking, and metadata support",
    "floorBackwardCompatibility": "Floor model maintains backward compatibility with both old (area_number, area_unit) and new (floor_area, floor_area_unit) field naming",
    "floorLevelFiltering": "Hierarchy API supports floor_level filtering by exact string match (e.g., 'Lvl 20', 'GF') for precise asset filtering within buildings",
    "searchFunctionality": "Search functionality implemented across all customer module GET endpoints: Sites, Buildings, Floors, Tenants, Documents, and Contacts. Simple case-insensitive partial matching across key fields using regex patterns",
    "searchImplementation": "Search parameter added to main list endpoints with logical field selection: sites (site_name, address, manager.name), buildings (building_name, building_code), floors (floor_name), tenants (tenant_legal_name, tenant_trading_name, abn, primary_contact_name, primary_contact_email, industry_type), contacts (full_name, method_value, job_title, department, role_type)",
    "tenantsCollection": "Added dedicated /api/tenants route separate from /api/building-tenants for simplified tenant management with search capability",
    "documentSearch": "Documents collection has comprehensive search with helper functions covering name, description, tags, customer, location, file metadata, and compliance fields",
    "customerStats": "Added customer statistics endpoint (/api/customers/:id/stats) that provides dynamic counts for sites, buildings, assets, and documents with proper nested field query for documents (customer.customer_id)",
    "contactManagement": "Comprehensive contact management APIs implemented: full CRUD operations (create, read, update, delete), primary contact management, search functionality, and nested contact operations within customer entities. Contacts are managed as subdocuments in the customer's contact_methods array.",
    "multipleContactMethods": "Enhanced contact system to support multiple contact methods per contact. Each contact can have multiple communication methods (Email, Phone, SMS, WhatsApp) with individual add/edit/delete operations. Only one primary method per contact is enforced. Includes backward compatibility with legacy single-method structure and dedicated API endpoints for method management (/:id/methods).",
    "dropdownApis": "Comprehensive dropdown/select APIs implemented for all entity types. Provides two categories: (1) Static dropdowns from constants (/api/dropdowns, /api/dropdowns/:module, /api/dropdowns/:module/:field) for predefined values like statuses, types, categories. (2) Dynamic entity dropdowns (/api/dropdowns/entities/*) that fetch active records from database for customers, sites, buildings, floors, assets, tenants, and vendors. All entity dropdowns support hierarchical filtering (e.g., sites by customer_id, buildings by site_id, floors by building_id). Document tags endpoint (/api/dropdowns/document-tags) returns all unique tags extracted from documents collection. All endpoints return consistent format with id, label, and value fields for easy integration with UI components.",
    "dropdownHierarchicalFiltering": "Entity dropdown endpoints support hierarchical filtering to enable cascading selects: sites can be filtered by customer_id, buildings by site_id, floors by building_id, assets by floor_id/building_id/site_id, tenants by building_id, vendors by category. This enables building dependent dropdowns in the UI where selecting a parent entity (e.g., customer) automatically filters child entities (e.g., sites).",
    "sitesSchemaEnhancement": "Sites schema updated (2025-10-05) with comprehensive property management fields: land_area (required, square metres), land_area_unit (default: m²), local_council (local government area), security_level (enum: Public Access, Controlled, High Security), shared_facilities (array: Car parks, Loading docks), note (additional information). Structured address support with street, suburb, state, postcode, coordinates, and full_address fields. All new fields optional for backward compatibility with existing records, defaults applied via aggregation pipeline.",
    "buildingsSchemaEnhancement": "Buildings schema updated (2025-10-05) with Australian compliance and accessibility features: primary_use (required enum: Office, Retail, Industrial, Warehouse, Mixed Use, Healthcare, Educational, Government, Hospitality, Other), last_inspection_date (Date, for AS1851 and AS3666 compliance tracking), accessibility_features (multi-select array: lifts, ramps, disabled_parking, accessible_toilets, hearing_loops, braille_signage, automatic_doors, wheelchair_access), parking_spaces (number, min: 0). Comprehensive validation on POST/PUT endpoints with field-specific error messages. NABERS rating (0-6 stars) for Australian energy compliance.",
    "floorsSchemaEnhancement": "Floors schema updated (2025-10-05) with enhanced operational fields and backward compatibility: occupancy field renamed to maximum_occupancy with virtual getter/setter maintaining full backward compatibility (both fields available in responses). New fields: occupancy_type (enum: Single Tenant, Multi Tenant, Common Area), access_control (enum: Public, Keycard Required, Restricted), fire_compartment (emergency planning/safety designation), hvac_zones (number, climate control zones), special_features (multi-select array: Equipment Room, Common Area, Server Room, Meeting Room, Kitchen, Storage). API layer automatically maps legacy 'occupancy' field to 'maximum_occupancy' in POST/PUT requests. Aggregation pipelines updated to use maximum_occupancy. All new fields optional with comprehensive validation.",
    "schemaUpdateValidation": "All schema updates include comprehensive API-level validation with clear, actionable error messages. Validation rules enforce data integrity (min/max values, enum restrictions, array validation) while maintaining backward compatibility. Australian standards compliance for all new fields (BCA accessibility, AS1851/AS3666 inspection tracking, NABERS energy ratings, local council requirements).",
    "assetsSchemaEnhancement": "Assets schema enhanced (2025-10-05 v1.2.0) with lifecycle management and technical specifications while maintaining full schema document compatibility. New lifecycle fields: warranty_expiry (Date), service_contractor (String, max 255), last_service_date (Date), next_service_due (Date). New technical fields: energy_rating (String, max 50), capacity_specifications (String), qr_code (String, max 255), notes (String). Added floor_id reference for precise floor-level asset tracking. All existing field names preserved per schema document (make, model, serial, condition, purchase_cost_aud, current_book_value_aud, asset_no, asset_id). Enhanced search across service_contractor, qr_code, notes fields. New sortable fields: warranty_expiry, next_service_due, last_service_date. Validation middleware added with ISO 8601 date validation, financial field constraints (min 0, 2 decimals), string length limits. No breaking changes - all updates additive.",
    "dropdownDatabaseMigration": "Dropdown system migrated from hardcoded constants to database-driven values (2025-10-05 v1.1.0). All enum validations removed from models and middleware. Dropdown values now stored in Settings collection with setting_key='dropdown_values'. Added vendor module dropdowns (contractor_types, consultant_specialisations, certification_authorities, services_provided, license_types, insurance_types, status_types, business_types, vendor_statuses), customer_organisation_sizes, and contact_method_types. POST /api/dropdowns now persists changes to database. All dropdown endpoints return source field (database|fallback_constants) and last_updated timestamp. Frontend validation done via dropdown API, backend accepts any string values for flexibility."
  }
}