{
  "api_info": {
    "title": "Fulqrom Hub REST API",
    "version": "2.0.0",
    "description": "Comprehensive API reference for Fulqrom Hub - Multi-tenant facility management system with resilient authentication",
    "base_url": "/api",
    "authentication": "Auth0 JWT Bearer Token",
    "authorization": "Role-based permissions with tenant isolation",
    "last_updated": "2024-12-19"
  },
  "endpoints": {
    "auth": {
      "description": "Authentication and user management with resilient Auth0 integration",
      "endpoints": [
        {
          "method": "POST",
          "path": "/auth/prepare-login",
          "description": "Prepare user for login by ensuring MongoDB/Auth0 sync (call before Auth0 login)",
          "parameters": {
            "body": {
              "email": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/auth/password-reset",
          "description": "Request password reset with auto-sync",
          "parameters": {
            "body": {
              "email": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/auth/sync-user",
          "description": "Sync or create user from Auth0 authentication",
          "parameters": {
            "body": {
              "auth0_id": "string (required)",
              "email": "string (required)",
              "full_name": "string (optional)",
              "phone": "string (optional)",
              "roles": "array (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/auth/user/:auth0_id",
          "description": "Get user by Auth0 ID",
          "parameters": {
            "path": {
              "auth0_id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/auth/change-password",
          "description": "Change user password in Auth0",
          "parameters": {
            "body": {
              "auth0_id": "string (required)",
              "current_password": "string (required)",
              "new_password": "string (required)"
            }
          }
        }
      ]
    },
    "analytics": {
      "description": "Analytics and reporting with tenant isolation",
      "endpoints": [
        {
          "method": "GET",
          "path": "/analytics/dashboard",
          "description": "Get optimized dashboard analytics with scope filtering",
          "parameters": {
            "query": {
              "period": "string (optional)",
              "tenant_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/analytics/reports",
          "description": "Get analytics reports (placeholder)"
        },
        {
          "method": "GET",
          "path": "/analytics/kpis",
          "description": "Get KPI calculations (placeholder)"
        },
        {
          "method": "GET",
          "path": "/analytics/buildings/coordinates",
          "description": "Get building coordinates for map display"
        }
      ]
    },
    "assets": {
      "description": "Asset management with comprehensive filtering and tenant isolation",
      "endpoints": [
        {
          "method": "GET",
          "path": "/assets",
          "description": "List all assets with filtering, pagination, and sorting",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 50)",
              "search": "string (optional)",
              "category": "string (optional)",
              "status": "string (optional)",
              "condition": "string (optional)",
              "criticality_level": "string (optional)",
              "building_id": "string (optional)",
              "floor_id": "string (optional)",
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "make": "string (optional)",
              "model": "string (optional)",
              "level": "string (optional)",
              "area": "string (optional)",
              "device_id": "string (optional)",
              "asset_no": "string (optional)",
              "asset_id": "string (optional)",
              "refrigerant": "string (optional)",
              "owner": "string (optional)",
              "service_status": "string (optional)",
              "age_min": "number (optional)",
              "age_max": "number (optional)",
              "purchase_cost_min": "number (optional)",
              "purchase_cost_max": "number (optional)",
              "current_value_min": "number (optional)",
              "current_value_max": "number (optional)",
              "test_result": "string (optional)",
              "is_active": "boolean (optional)",
              "sort_by": "string (optional)",
              "sort_order": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/assets/:id",
          "description": "Get single asset by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/assets",
          "description": "Create new asset",
          "parameters": {
            "body": {
              "asset_name": "string (required)",
              "asset_code": "string (required)",
              "category": "string (required)",
              "customer_id": "string (required)",
              "site_id": "string (optional)",
              "building_id": "string (optional)",
              "floor_id": "string (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/assets/:id",
          "description": "Update existing asset",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Asset object"
          }
        },
        {
          "method": "DELETE",
          "path": "/assets/:id",
          "description": "Delete asset (soft delete)",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/assets/by-building/:buildingId",
          "description": "Get assets filtered by building ID",
          "parameters": {
            "path": {
              "buildingId": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/assets/by-category",
          "description": "Group assets by category with statistics",
          "parameters": {
            "query": {
              "building_id": "string (optional)",
              "floor_id": "string (optional)",
              "customer_id": "string (optional)",
              "site_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/assets/summary/stats",
          "description": "Get overall asset summary statistics",
          "parameters": {
            "query": {
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_id": "string (optional)"
            }
          }
        }
      ]
    },
    "buildings": {
      "description": "Building management with comprehensive filtering and tenant isolation",
      "endpoints": [
        {
          "method": "GET",
          "path": "/buildings",
          "description": "List all buildings with pagination, search, and filters",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "per_page": "number (optional, default: 10)",
              "search": "string (optional)",
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_type": "string (optional)",
              "operational_status": "string (optional)",
              "status": "string (optional)",
              "is_active": "boolean (optional)",
              "sort_by": "string (optional)",
              "sort_order": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/buildings/:id",
          "description": "Get single building by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/buildings",
          "description": "Create new building",
          "parameters": {
            "body": {
              "building_name": "string (required)",
              "building_code": "string (required)",
              "site_id": "string (required)",
              "customer_id": "string (required)",
              "primary_use": "string (required)",
              "building_type": "string (optional)",
              "address": "object (required)",
              "last_inspection_date": "date (optional)",
              "accessibility_features": "array (optional)",
              "parking_spaces": "number (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/buildings/:id",
          "description": "Update existing building",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Building object"
          }
        },
        {
          "method": "DELETE",
          "path": "/buildings/:id",
          "description": "Delete building",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/buildings/summary/stats",
          "description": "Get building summary statistics",
          "parameters": {
            "query": {
              "customer_id": "string (optional)",
              "site_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/buildings/by-category",
          "description": "Group buildings by category with statistics",
          "parameters": {
            "query": {
              "customer_id": "string (optional)",
              "site_id": "string (optional)"
            }
          }
        }
      ]
    },
    "customers": {
      "description": "Customer (tenant) management with comprehensive operations",
      "endpoints": [
        {
          "method": "GET",
          "path": "/customers",
          "description": "List all customers with search and limit options",
          "parameters": {
            "query": {
              "search": "string (optional)",
              "limit": "number (optional, default: 50)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/customers/:id",
          "description": "Get single customer by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/customers/:id/stats",
          "description": "Get statistics for specific customer",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/customers/:id/contacts/primary",
          "description": "Get primary contact for customer",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/customers",
          "description": "Create new customer",
          "parameters": {
            "body": {
              "organisation": {
                "organisation_name": "string (required)"
              },
              "company_profile": {
                "business_number": "string (optional)",
                "trading_name": "string (optional)"
              }
            }
          }
        },
        {
          "method": "PUT",
          "path": "/customers/:id",
          "description": "Update customer",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Customer object"
          }
        },
        {
          "method": "DELETE",
          "path": "/customers/:id",
          "description": "Delete customer with cascading deletions",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "query": {
              "delete_s3": "boolean (optional, default: true)",
              "immediate_s3_delete": "boolean (optional, default: false)"
            }
          }
        }
      ]
    },
    "floors": {
      "description": "Floor management with comprehensive filtering",
      "endpoints": [
        {
          "method": "GET",
          "path": "/floors",
          "description": "List all floors with pagination, search, and filters",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "per_page": "number (optional, default: 10)",
              "search": "string (optional)",
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_id": "string (optional)",
              "floor_type": "string (optional)",
              "sort_by": "string (optional)",
              "sort_order": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/floors/:id",
          "description": "Get single floor by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/floors",
          "description": "Create new floor",
          "parameters": {
            "body": {
              "floor_name": "string (required)",
              "floor_number": "string (required)",
              "building_id": "string (required)",
              "floor_type": "string (required)",
              "customer_id": "string (required)",
              "site_id": "string (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/floors/:id",
          "description": "Update existing floor",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Floor object"
          }
        },
        {
          "method": "DELETE",
          "path": "/floors/:id",
          "description": "Delete floor",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/floors/by-building/:buildingId",
          "description": "Get floors filtered by building ID",
          "parameters": {
            "path": {
              "buildingId": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/floors/summary/stats",
          "description": "Get floor summary statistics"
        },
        {
          "method": "GET",
          "path": "/floors/by-type",
          "description": "Group floors by type with statistics",
          "parameters": {
            "query": {
              "building_id": "string (optional)",
              "customer_id": "string (optional)",
              "site_id": "string (optional)"
            }
          }
        }
      ]
    },
    "organizations": {
      "description": "Organization (tenant) registration and management",
      "endpoints": [
        {
          "method": "POST",
          "path": "/organizations/register",
          "description": "Register new organization (public endpoint)",
          "parameters": {
            "body": {
              "name": "string (required)",
              "email": "string (required)",
              "abn": "string (optional)",
              "acn": "string (optional)",
              "phone": "string (optional)",
              "address": "object (optional)",
              "owner_email": "string (required)",
              "owner_name": "string (required)",
              "owner_phone": "string (optional)",
              "plan_name": "string (optional, default: Starter)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/organizations/current",
          "description": "Get current user's organization"
        },
        {
          "method": "PUT",
          "path": "/organizations/:id",
          "description": "Update organization details",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Organization object"
          }
        },
        {
          "method": "GET",
          "path": "/organizations/:id/members",
          "description": "Get all users (members) associated with organization",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        }
      ]
    },
    "sites": {
      "description": "Site management with comprehensive filtering and tenant isolation",
      "endpoints": [
        {
          "method": "GET",
          "path": "/sites",
          "description": "List all sites with filters, pagination, and sorting",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 20)",
              "search": "string (optional)",
              "status": "string (optional)",
              "site_type": "string (optional)",
              "state": "string (optional)",
              "customer_id": "string (optional)",
              "tenant_id": "string (optional, super admin only)",
              "is_active": "boolean (optional)",
              "sort_by": "string (optional)",
              "sort_order": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/sites/:id",
          "description": "Get single site with full details and related counts",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/sites",
          "description": "Create new site",
          "parameters": {
            "body": {
              "site_name": "string (required)",
              "customer_id": "string (required)",
              "address": "object (required)",
              "site_type": "string (optional)",
              "status": "string (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/sites/:id",
          "description": "Update existing site",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Site object"
          }
        },
        {
          "method": "DELETE",
          "path": "/sites/:id",
          "description": "Soft delete site",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        }
      ]
    },
    "users": {
      "description": "User account and permission management with resource-level access control",
      "endpoints": [
        {
          "method": "GET",
          "path": "/users/:id/accessible-resources",
          "description": "Get resources accessible to user for assignment",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "query": {
              "resource_type": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/users",
          "description": "List all users with roles, pagination, and filters",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 50)",
              "search": "string (optional)",
              "role_id": "string (optional)",
              "is_active": "boolean (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/users/:id",
          "description": "Get single user by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/users",
          "description": "Create new user, syncing with Auth0",
          "parameters": {
            "body": {
              "email": "string (required)",
              "full_name": "string (required)",
              "role_ids": "array (required)",
              "phone": "string (optional)",
              "resource_access": "array (optional)",
              "document_categories": "array (optional)",
              "engineering_disciplines": "array (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/users/:id",
          "description": "Update user, syncing with Auth0 roles",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "User object"
          }
        },
        {
          "method": "DELETE",
          "path": "/users/:id",
          "description": "Delete user including from Auth0",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/users/:id/deactivate",
          "description": "Deactivate user, blocking them in Auth0",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": {
              "deactivated_by": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/users/:id/resource-access",
          "description": "Get user's specific resource access permissions",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/users/resource-access",
          "description": "Assign resource-level permissions to user",
          "parameters": {
            "body": {
              "user_id": "string (required)",
              "resource_type": "string (required)",
              "resource_id": "string (required)",
              "resource_name": "string (optional)",
              "granted_by": "string (optional)",
              "permissions": "object (optional)"
            }
          }
        },
        {
          "method": "DELETE",
          "path": "/users/resource-access/:id",
          "description": "Remove specific resource access from user",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "query": {
              "user_id": "string (required)"
            }
          }
        }
      ]
    },
    "audit_logs": {
      "description": "Audit logs management with tenant isolation",
      "endpoints": [
        {
          "method": "GET",
          "path": "/audit-logs",
          "description": "Get audit logs with pagination and filtering (tenant-isolated)",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 50)",
              "action": "string (optional)",
              "resource_type": "string (optional)",
              "status": "string (optional)",
              "user_id": "string (optional)",
              "start_date": "date (optional)",
              "end_date": "date (optional)"
            }
          },
          "security": "Automatically filters by current user's tenant - no cross-tenant access"
        },
        {
          "method": "POST",
          "path": "/audit-logs",
          "description": "Create audit log entry",
          "parameters": {
            "body": {
              "action": "string (required)",
              "resource_type": "string (required)",
              "resource_id": "string (required)",
              "details": "object (optional)"
            }
          }
        }
      ]
    },
    "contacts": {
      "description": "Contact management nested under customers",
      "endpoints": [
        {
          "method": "GET",
          "path": "/customers/:customerId/contacts/primary",
          "description": "Get primary contact for customer",
          "parameters": {
            "path": {
              "customerId": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/customers/:customerId/contacts/search",
          "description": "Search contacts for customer by various criteria",
          "parameters": {
            "path": {
              "customerId": "string (required)"
            },
            "query": {
              "q": "string (optional)",
              "role_type": "string (optional)",
              "contact_type": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/customers/:customerId/contacts",
          "description": "List all contacts for customer",
          "parameters": {
            "path": {
              "customerId": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/customers/:customerId/contacts/:id",
          "description": "Get single contact by ID for customer",
          "parameters": {
            "path": {
              "customerId": "string (required)",
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/customers/:customerId/contacts",
          "description": "Create new contact for customer",
          "parameters": {
            "path": {
              "customerId": "string (required)"
            },
            "body": {
              "name": "string (required)",
              "email": "string (optional)",
              "phone": "string (optional)",
              "is_primary": "boolean (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/customers/:customerId/contacts/:id",
          "description": "Update existing contact for customer",
          "parameters": {
            "path": {
              "customerId": "string (required)",
              "id": "string (required)"
            },
            "body": "Contact object"
          }
        },
        {
          "method": "PATCH",
          "path": "/customers/:customerId/contacts/:id/primary",
          "description": "Set specific contact as primary",
          "parameters": {
            "path": {
              "customerId": "string (required)",
              "id": "string (required)"
            }
          }
        },
        {
          "method": "DELETE",
          "path": "/customers/:customerId/contacts/:id",
          "description": "Delete contact for customer",
          "parameters": {
            "path": {
              "customerId": "string (required)",
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/customers/:customerId/contacts/:id/methods",
          "description": "Add contact method to existing contact",
          "parameters": {
            "path": {
              "customerId": "string (required)",
              "id": "string (required)"
            },
            "body": {
              "type": "string (required)",
              "value": "string (required)",
              "is_primary": "boolean (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/customers/:customerId/contacts/:id/methods/:methodId",
          "description": "Update specific contact method",
          "parameters": {
            "path": {
              "customerId": "string (required)",
              "id": "string (required)",
              "methodId": "string (required)"
            },
            "body": "Contact method object"
          }
        },
        {
          "method": "DELETE",
          "path": "/customers/:customerId/contacts/:id/methods/:methodId",
          "description": "Delete specific contact method",
          "parameters": {
            "path": {
              "customerId": "string (required)",
              "id": "string (required)",
              "methodId": "string (required)"
            }
          }
        }
      ]
    },
    "dropdowns": {
      "description": "Dynamic and static dropdown data with tenant isolation",
      "endpoints": [
        {
          "method": "GET",
          "path": "/dropdowns/entities/customers",
          "description": "Get list of customers for dropdowns"
        },
        {
          "method": "GET",
          "path": "/dropdowns/entities/sites",
          "description": "Get list of sites for dropdowns",
          "parameters": {
            "query": {
              "customer_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/dropdowns/entities/buildings",
          "description": "Get list of buildings for dropdowns",
          "parameters": {
            "query": {
              "site_id": "string (optional)",
              "customer_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/dropdowns/entities/floors",
          "description": "Get list of floors for dropdowns",
          "parameters": {
            "query": {
              "building_id": "string (optional)",
              "site_id": "string (optional)",
              "customer_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/dropdowns/entities/assets",
          "description": "Get list of assets for dropdowns",
          "parameters": {
            "query": {
              "building_id": "string (optional)",
              "floor_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/dropdowns/entities/tenants",
          "description": "Get list of building tenants for dropdowns",
          "parameters": {
            "query": {
              "building_id": "string (optional)",
              "floor_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/dropdowns/entities/vendors",
          "description": "Get list of vendors for dropdowns",
          "parameters": {
            "query": {
              "category": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/dropdowns/document-tags",
          "description": "Get all unique document tags"
        },
        {
          "method": "GET",
          "path": "/dropdowns",
          "description": "Get all dropdown values (static and dynamic)"
        },
        {
          "method": "POST",
          "path": "/dropdowns",
          "description": "Update all dropdown values and persist to DB",
          "parameters": {
            "body": "Dropdown values object"
          }
        },
        {
          "method": "GET",
          "path": "/dropdowns/:module/:field",
          "description": "Get specific field dropdown values for module",
          "parameters": {
            "path": {
              "module": "string (required)",
              "field": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/dropdowns/:module",
          "description": "Get all dropdown values for specific module",
          "parameters": {
            "path": {
              "module": "string (required)"
            }
          }
        }
      ]
    },
    "hierarchy": {
      "description": "Hierarchical views of customer, site, building, floor, and asset data",
      "endpoints": [
        {
          "method": "GET",
          "path": "/hierarchy/:customer_id",
          "description": "Get full hierarchy for customer (sites -> buildings -> floors -> assets)",
          "parameters": {
            "path": {
              "customer_id": "string (required)"
            },
            "query": {
              "building_id": "string (optional)",
              "floor_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/hierarchy/site/:site_id",
          "description": "Get hierarchy for specific site (buildings -> floors -> assets)",
          "parameters": {
            "path": {
              "site_id": "string (required)"
            },
            "query": {
              "building_id": "string (optional)",
              "floor_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/hierarchy/building/:building_id",
          "description": "Get hierarchy for specific building (floors -> assets)",
          "parameters": {
            "path": {
              "building_id": "string (required)"
            },
            "query": {
              "floor_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/hierarchy/:customer_id/stats",
          "description": "Get summary statistics for customer's hierarchy",
          "parameters": {
            "path": {
              "customer_id": "string (required)"
            }
          }
        }
      ]
    },
    "notifications": {
      "description": "User notification management",
      "endpoints": [
        {
          "method": "GET",
          "path": "/notifications",
          "description": "Get notifications for current user with filtering and pagination",
          "parameters": {
            "query": {
              "limit": "number (optional, default: 50)",
              "skip": "number (optional, default: 0)",
              "offset": "number (optional, default: 0)",
              "unreadOnly": "boolean (optional, default: false)",
              "types": "string (optional)",
              "startDate": "date (optional)",
              "endDate": "date (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/notifications/unread-count",
          "description": "Get unread notification count for current user"
        },
        {
          "method": "PUT",
          "path": "/notifications/:id/read",
          "description": "Mark single notification as read",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/notifications/mark-read",
          "description": "Mark multiple notifications as read",
          "parameters": {
            "body": {
              "notification_ids": "array (required)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/notifications/mark-all-read",
          "description": "Mark all notifications as read for current user"
        },
        {
          "method": "DELETE",
          "path": "/notifications/:id",
          "description": "Delete single notification",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "DELETE",
          "path": "/notifications",
          "description": "Delete all read notifications for current user"
        }
      ]
    },
    "tenants": {
      "description": "Building tenant management with comprehensive validation",
      "endpoints": [
        {
          "method": "GET",
          "path": "/tenants",
          "description": "List all tenants with comprehensive filtering",
          "parameters": {
            "query": {
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_id": "string (optional)",
              "floor_id": "string (optional)",
              "tenant_status": "string (optional)",
              "lease_type": "string (optional)",
              "industry_type": "string (optional)",
              "lease_expiring_soon": "boolean (optional)",
              "is_active": "boolean (optional)",
              "search": "string (optional)",
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 20)",
              "sort_by": "string (optional)",
              "sort_order": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/tenants/:id",
          "description": "Get single tenant by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/tenants",
          "description": "Create new tenant",
          "parameters": {
            "body": {
              "tenant_legal_name": "string (required)",
              "building_id": "string (required)",
              "customer_id": "string (required)",
              "tenant_trading_name": "string (optional)",
              "abn": "string (optional)",
              "primary_contact_name": "string (optional)",
              "primary_contact_email": "string (optional)",
              "industry_type": "string (optional)",
              "lease_type": "string (optional)",
              "lease_start_date": "date (optional)",
              "lease_end_date": "date (optional)",
              "occupied_area": "number (optional)",
              "number_of_employees": "number (optional)",
              "allocated_parking_spaces": "number (optional)",
              "rental_rate": "number (optional)",
              "special_requirements": "array (optional)",
              "business_hours": "object (optional)",
              "emergency_contacts": "array (optional)",
              "contacts": "array (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/tenants/:id",
          "description": "Update existing tenant",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Tenant object"
          }
        },
        {
          "method": "DELETE",
          "path": "/tenants/:id",
          "description": "Delete tenant",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/tenants/by-building/:buildingId",
          "description": "Get tenants filtered by building ID",
          "parameters": {
            "path": {
              "buildingId": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/tenants/summary/stats",
          "description": "Get tenant summary statistics",
          "parameters": {
            "query": {
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/tenants/by-industry",
          "description": "Group tenants by industry type with statistics",
          "parameters": {
            "query": {
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_id": "string (optional)"
            }
          }
        }
      ]
    },
    "vendors": {
      "description": "Vendor management with comprehensive filtering and tenant isolation",
      "endpoints": [
        {
          "method": "GET",
          "path": "/vendors",
          "description": "List all vendors with filters and pagination",
          "parameters": {
            "query": {
              "search": "string (optional)",
              "category": "string (optional)",
              "status": "string (optional)",
              "rating": "number (optional)",
              "state": "string (optional)",
              "compliance": "string (optional)",
              "is_active": "boolean (optional)",
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 20)",
              "sort_by": "string (optional)",
              "sort_order": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/vendors/stats",
          "description": "Get vendor statistics"
        },
        {
          "method": "GET",
          "path": "/vendors/:id",
          "description": "Get single vendor by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/vendors",
          "description": "Create new vendor",
          "parameters": {
            "body": {
              "name": "string (required)",
              "category": "string (required)",
              "address": "object (required)",
              "businessType": "string (required)",
              "contacts": "array (required)",
              "abn": "string (optional)",
              "email": "string (optional)",
              "phone": "string (optional)",
              "website": "string (optional)",
              "description": "string (optional)",
              "specializations": "array (optional)",
              "licenses": "array (optional)",
              "insurances": "array (optional)",
              "certifications": "array (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/vendors/:id",
          "description": "Update vendor",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Vendor object"
          }
        },
        {
          "method": "DELETE",
          "path": "/vendors/:id",
          "description": "Soft delete vendor",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "PATCH",
          "path": "/vendors/:id/status",
          "description": "Update vendor status",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": {
              "status": "string (required)"
            }
          }
        }
      ]
    },
    "documents": {
      "description": "Document management with S3 file storage and comprehensive filtering",
      "endpoints": [
        {
          "method": "GET",
          "path": "/documents",
          "description": "List all documents with comprehensive filtering and pagination",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 20)",
              "search": "string (optional)",
              "document_type": "string (optional)",
              "status": "string (optional)",
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_id": "string (optional)",
              "floor_id": "string (optional)",
              "asset_id": "string (optional)",
              "tenant_id": "string (optional)",
              "vendor_id": "string (optional)",
              "tags": "string (optional)",
              "sort_by": "string (optional)",
              "sort_order": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/documents/:id",
          "description": "Get single document by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/documents",
          "description": "Create new document",
          "parameters": {
            "body": {
              "document_name": "string (required)",
              "document_type": "string (required)",
              "customer_id": "string (required)",
              "site_id": "string (optional)",
              "building_id": "string (optional)",
              "floor_id": "string (optional)",
              "asset_id": "string (optional)",
              "tenant_id": "string (optional)",
              "vendor_id": "string (optional)",
              "description": "string (optional)",
              "tags": "array (optional)",
              "status": "string (optional)",
              "priority": "string (optional)",
              "due_date": "date (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/documents/:id",
          "description": "Update existing document",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Document object"
          }
        },
        {
          "method": "DELETE",
          "path": "/documents/:id",
          "description": "Delete document",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/documents/:id/upload",
          "description": "Upload file to document",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "form": {
              "file": "file (required)",
              "description": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/documents/:id/download/:fileId",
          "description": "Download document file",
          "parameters": {
            "path": {
              "id": "string (required)",
              "fileId": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/documents/:id/preview/:fileId",
          "description": "Get preview URL for document file",
          "parameters": {
            "path": {
              "id": "string (required)",
              "fileId": "string (required)"
            }
          }
        },
        {
          "method": "DELETE",
          "path": "/documents/:id/files/:fileId",
          "description": "Delete specific file from document",
          "parameters": {
            "path": {
              "id": "string (required)",
              "fileId": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/documents/summary/stats",
          "description": "Get document summary statistics",
          "parameters": {
            "query": {
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/documents/by-type",
          "description": "Group documents by type with statistics",
          "parameters": {
            "query": {
              "customer_id": "string (optional)",
              "site_id": "string (optional)",
              "building_id": "string (optional)"
            }
          }
        }
      ]
    },
    "roles": {
      "description": "Role management (LEGACY - marked for removal)",
      "endpoints": [
        {
          "method": "GET",
          "path": "/roles",
          "description": "Get all roles with user counts",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 50)",
              "is_active": "boolean (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/roles/:id",
          "description": "Get single role by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/roles",
          "description": "Create new role, syncing with Auth0",
          "parameters": {
            "body": {
              "name": "string (required)",
              "description": "string (optional)",
              "permissions": "array (optional)",
              "is_active": "boolean (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/roles/:id",
          "description": "Update role, syncing with Auth0",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": "Role object"
          }
        },
        {
          "method": "DELETE",
          "path": "/roles/:id",
          "description": "Delete role including from Auth0",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/roles/:id/users",
          "description": "Get users assigned to specific role",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 50)"
            }
          }
        }
      ]
    },
    "roles_v2": {
      "description": "Role management V2 (new implementation)",
      "endpoints": [
        {
          "method": "GET",
          "path": "/v2/roles",
          "description": "Get all predefined roles",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 50)",
              "is_active": "boolean (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/v2/roles/:id",
          "description": "Get role by ID",
          "parameters": {
            "path": {
              "id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/v2/roles/name/:name",
          "description": "Get role by name",
          "parameters": {
            "path": {
              "name": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/v2/roles/initialize",
          "description": "Initialize predefined roles (Admin only)"
        },
        {
          "method": "GET",
          "path": "/v2/roles/permissions/matrix",
          "description": "Get permissions matrix for all roles"
        }
      ]
    },
    "admin": {
      "description": "Super admin management (requires super admin privileges)",
      "endpoints": [
        {
          "method": "GET",
          "path": "/admin/stats/all",
          "description": "Get comprehensive system statistics",
          "parameters": {
            "query": {
              "tenant_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/analytics/usage",
          "description": "Get usage analytics",
          "parameters": {
            "query": {
              "period": "string (optional, default: 30d)",
              "tenant_id": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/analytics/overview",
          "description": "Get overview analytics"
        },
        {
          "method": "GET",
          "path": "/admin/tenants",
          "description": "Get all tenants with filtering and pagination",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 15)",
              "search": "string (optional)",
              "active": "boolean (optional)",
              "sort_by": "string (optional)",
              "sort_order": "string (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/tenants/:tenant",
          "description": "Get specific tenant details",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/admin/tenants",
          "description": "Create new tenant",
          "parameters": {
            "body": {
              "name": "string (required)",
              "organisation_name": "string (optional)",
              "email_domain": "string (optional)",
              "business_number": "string (optional)",
              "status": "string (optional)",
              "is_active": "boolean (optional)",
              "plan_id": "string (optional)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/admin/tenants/provision",
          "description": "Create new tenant with comprehensive provisioning",
          "parameters": {
            "body": {
              "name": "string (required)",
              "organisation_name": "string (optional)",
              "email_domain": "string (optional)",
              "email": "string (optional)",
              "password": "string (optional)",
              "is_active": "boolean (optional)",
              "plan_id": "string (optional)",
              "is_trial": "boolean (optional)",
              "create_user": "boolean (optional)",
              "create_subscription": "boolean (optional)",
              "send_welcome_email": "boolean (optional)",
              "seed_dropdowns": "boolean (optional)",
              "create_s3_bucket": "boolean (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/admin/tenants/:tenant",
          "description": "Update tenant",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            },
            "body": "Tenant object"
          }
        },
        {
          "method": "DELETE",
          "path": "/admin/tenants/:tenant",
          "description": "Delete tenant (soft delete)",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            }
          }
        },
        {
          "method": "PATCH",
          "path": "/admin/tenants/:tenant/status",
          "description": "Update tenant status",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            },
            "body": {
              "is_active": "boolean (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/tenants/:tenant/stats",
          "description": "Get tenant statistics",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/tenants/:tenant/location-data",
          "description": "Get tenant location data",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/tenants/:tenant/users",
          "description": "Get all users for specific tenant",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            },
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 15)",
              "search": "string (optional)",
              "is_active": "boolean (optional)",
              "role_id": "string (optional)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/admin/tenants/:tenant/users",
          "description": "Create new user for specific tenant",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            },
            "body": {
              "name": "string (required)",
              "email": "string (required)",
              "password": "string (required)",
              "roleIds": "array (required)",
              "phone": "string (optional)",
              "is_active": "boolean (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/admin/tenants/:tenant/users/:userId",
          "description": "Update user for specific tenant",
          "parameters": {
            "path": {
              "tenant": "string (required)",
              "userId": "string (required)"
            },
            "body": "User object"
          }
        },
        {
          "method": "DELETE",
          "path": "/admin/tenants/:tenant/users/:userId",
          "description": "Delete user from specific tenant",
          "parameters": {
            "path": {
              "tenant": "string (required)",
              "userId": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/admin/tenants/:tenant/users/sync-auth0",
          "description": "Sync tenant users to Auth0",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            },
            "query": {
              "limit": "number (optional)",
              "skipExisting": "boolean (optional, default: true)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/tenants/:tenant/audit-logs",
          "description": "Get audit logs for specific tenant",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            },
            "query": {
              "limit": "number (optional, default: 10)",
              "page": "number (optional, default: 1)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/users",
          "description": "Get all users across all tenants",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 15)",
              "search": "string (optional)",
              "tenant_id": "string (optional)",
              "role_id": "string (optional)",
              "is_active": "boolean (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/users/:user",
          "description": "Get specific user details",
          "parameters": {
            "path": {
              "user": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/admin/users",
          "description": "Create new user",
          "parameters": {
            "body": {
              "email": "string (required)",
              "full_name": "string (required)",
              "customer_id": "string (required)",
              "phone": "string (optional)",
              "role_ids": "array (optional)",
              "is_active": "boolean (optional)",
              "auth0_id": "string (optional)",
              "custom_id": "string (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/admin/users/:user",
          "description": "Update user",
          "parameters": {
            "path": {
              "user": "string (required)"
            },
            "body": "User object"
          }
        },
        {
          "method": "DELETE",
          "path": "/admin/users/:user",
          "description": "Delete user (soft delete)",
          "parameters": {
            "path": {
              "user": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/users/tenants",
          "description": "Get tenants for user creation dropdown"
        },
        {
          "method": "GET",
          "path": "/admin/users/roles",
          "description": "Get roles for user creation dropdown"
        },
        {
          "method": "GET",
          "path": "/admin/roles",
          "description": "Get all roles with permissions",
          "parameters": {
            "query": {
              "search": "string (optional)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/admin/roles",
          "description": "Create new role",
          "parameters": {
            "body": {
              "name": "string (required)",
              "description": "string (optional)",
              "document_type": "string (optional)",
              "engineering_discipline": "string (optional)",
              "permissions": "array (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/roles/:role",
          "description": "Get specific role details",
          "parameters": {
            "path": {
              "role": "string (required)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/admin/roles/:role",
          "description": "Update role",
          "parameters": {
            "path": {
              "role": "string (required)"
            },
            "body": "Role object"
          }
        },
        {
          "method": "DELETE",
          "path": "/admin/roles/:role",
          "description": "Delete role (soft delete)",
          "parameters": {
            "path": {
              "role": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/roles/permissions/available",
          "description": "Get available permissions"
        },
        {
          "method": "POST",
          "path": "/admin/roles/assign",
          "description": "Assign role to user",
          "parameters": {
            "body": {
              "user_id": "string (required)",
              "role_id": "string (required)"
            }
          }
        },
        {
          "method": "DELETE",
          "path": "/admin/roles/remove",
          "description": "Remove role from user",
          "parameters": {
            "body": {
              "user_id": "string (required)",
              "role_id": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/plans",
          "description": "Get all plans",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 15)",
              "search": "string (optional)",
              "is_active": "boolean (optional)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/plans/:plan",
          "description": "Get specific plan details",
          "parameters": {
            "path": {
              "plan": "string (required)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/admin/plans",
          "description": "Create new plan",
          "parameters": {
            "body": {
              "name": "string (required)",
              "description": "string (optional)",
              "price": "number (required)",
              "billing_cycle": "string (required)",
              "currency": "string (optional, default: AUD)",
              "features": "object (optional)",
              "is_active": "boolean (optional)",
              "is_popular": "boolean (optional)",
              "sort_order": "number (optional)"
            }
          }
        },
        {
          "method": "PUT",
          "path": "/admin/plans/:plan",
          "description": "Update plan",
          "parameters": {
            "path": {
              "plan": "string (required)"
            },
            "body": "Plan object"
          }
        },
        {
          "method": "DELETE",
          "path": "/admin/plans/:plan",
          "description": "Delete plan (soft delete)",
          "parameters": {
            "path": {
              "plan": "string (required)"
            }
          }
        },
        {
          "method": "GET",
          "path": "/admin/subscriptions",
          "description": "Get all subscriptions",
          "parameters": {
            "query": {
              "page": "number (optional, default: 1)",
              "limit": "number (optional, default: 15)",
              "status": "string (optional)",
              "tenant_id": "string (optional)",
              "plan_id": "string (optional)"
            }
          }
        },
        {
          "method": "POST",
          "path": "/admin/tenants/:tenant/subscribe",
          "description": "Subscribe tenant to plan",
          "parameters": {
            "path": {
              "tenant": "string (required)"
            },
            "body": {
              "plan_id": "string (required)",
              "start_date": "date (optional)",
              "end_date": "date (optional)",
              "is_trial": "boolean (optional)",
              "trial_days": "number (optional)",
              "auto_renew": "boolean (optional)"
            }
          }
        },
        {
          "method": "PATCH",
          "path": "/admin/subscription/:id/status",
          "description": "Update subscription status",
          "parameters": {
            "path": {
              "id": "string (required)"
            },
            "body": {
              "status": "string (required)",
              "reason": "string (optional)"
            }
          }
        }
      ]
    }
  },
  "authentication": {
    "type": "JWT Bearer Token",
    "provider": "Auth0",
    "header": "Authorization: Bearer <token>",
    "resilient_features": [
      "prepare-login endpoint for pre-auth sync",
      "password-reset with auto-sync",
      "post-login sync with fallback handling",
      "Auth0 Management API integration"
    ],
    "middleware": [
      "authMiddleware - Validates JWT token",
      "authorizationMiddleware - Checks user permissions",
      "tenantContext - Sets tenant context for multi-tenancy"
    ]
  },
  "authorization": {
    "type": "Role-based with resource-level permissions",
    "permissions": [
      "view", "create", "edit", "delete"
    ],
    "modules": [
      "org", "sites", "buildings", "floors", "tenants", 
      "documents", "assets", "vendors", "customers", 
      "users", "analytics"
    ],
    "resource_access": {
      "description": "Fine-grained resource-level permissions",
      "supported_types": [
        "customer", "site", "building", "floor", "asset", 
        "tenant", "vendor", "document_category", "document_discipline"
      ],
      "permission_structure": {
        "can_view": "boolean",
        "can_create": "boolean", 
        "can_edit": "boolean",
        "can_delete": "boolean"
      }
    },
    "middleware": [
      "checkModulePermission - Module-level permissions",
      "checkResourcePermission - Resource-level permissions",
      "applyScopeFiltering - Data filtering based on permissions"
    ]
  },
  "multi_tenancy": {
    "type": "Tenant isolation",
    "implementation": "tenant_id field in all collections",
    "middleware": "tenantContext",
    "features": [
      "Data isolation by tenant",
      "Tenant-specific S3 buckets",
      "Tenant-specific configurations",
      "Cross-tenant access prevention",
      "Super admin cross-tenant access with X-Tenant-Id header"
    ],
    "tenant_context": {
      "automatic": "Set from authenticated user's tenant_id",
      "super_admin_bypass": "Can access any tenant with proper headers",
      "isolation_enforcement": "All queries automatically filtered by tenant_id"
    }
  },
  "file_storage": {
    "provider": "AWS S3",
    "features": [
      "Tenant-specific buckets",
      "Presigned URLs for secure access",
      "File preview generation",
      "Automatic file cleanup",
      "Storage analytics",
      "S3 deletion strategies (immediate vs tagged expiry)"
    ],
    "max_file_size": "10GB",
    "supported_formats": "All file types",
    "deletion_strategies": {
      "immediate": "Delete files immediately",
      "tagged_expiry": "Tag files for 90-day expiry"
    }
  },
  "validation": {
    "middleware": [
      "documentValidation - Document-specific validation",
      "assetValidation - Asset-specific validation",
      "validation - General validation helpers"
    ],
    "features": [
      "Required field validation",
      "Data type validation",
      "Business rule validation",
      "Custom validation rules",
      "Australian-specific validations (ABN, postcode)"
    ]
  },
  "pagination": {
    "default_page_size": 20,
    "max_page_size": 200,
    "parameters": {
      "page": "Page number (1-based)",
      "limit": "Items per page",
      "per_page": "Alternative to limit",
      "sort_by": "Field to sort by",
      "sort_order": "asc or desc"
    }
  },
  "search": {
    "features": [
      "Full-text search across multiple fields",
      "Case-insensitive search",
      "Regex pattern matching",
      "Filtered search results",
      "Multi-select filtering with comma-separated values"
    ],
    "parameters": {
      "search": "Search term",
      "filters": "Field-specific filters"
    }
  },
  "error_handling": {
    "format": "JSON",
    "structure": {
      "success": "boolean",
      "message": "string",
      "error": "string (optional)",
      "errors": "array (optional)"
    },
    "status_codes": [
      "200 - Success",
      "201 - Created",
      "400 - Bad Request",
      "401 - Unauthorized",
      "403 - Forbidden",
      "404 - Not Found",
      "422 - Validation Error",
      "500 - Server Error"
    ]
  },
  "rate_limiting": {
    "implementation": "Not explicitly configured",
    "recommendations": [
      "Implement rate limiting for public endpoints",
      "Consider tenant-specific rate limits",
      "Monitor API usage patterns"
    ]
  },
  "monitoring": {
    "features": [
      "Audit logging for user actions",
      "System health monitoring",
      "Usage analytics",
      "Error tracking",
      "Tenant-isolated audit logs"
    ],
    "endpoints": [
      "/health - System health check",
      "/ - API documentation endpoint"
    ]
  },
  "new_features": {
    "resilient_authentication": {
      "description": "Enhanced authentication system with Auth0 resilience",
      "endpoints": [
        "/auth/prepare-login",
        "/auth/password-reset", 
        "/auth/sync-user"
      ]
    },
    "resource_level_permissions": {
      "description": "Fine-grained permissions for specific resources",
      "endpoints": [
        "/users/:id/accessible-resources",
        "/users/resource-access",
        "/users/:id/resource-access"
      ]
    },
    "comprehensive_filtering": {
      "description": "Enhanced filtering capabilities across all endpoints",
      "features": [
        "Multi-select filtering",
        "Range filtering",
        "Advanced search",
        "Tenant isolation"
      ]
    },
    "analytics_enhancements": {
      "description": "Improved analytics with tenant isolation",
      "endpoints": [
        "/analytics/dashboard",
        "/analytics/buildings/coordinates"
      ]
    }
  }
}